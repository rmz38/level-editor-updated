{"version":3,"sources":["components/styles.module.css","components/Turret.tsx","components/World.tsx","components/Door.tsx","components/Avatar.tsx","components/Capsule.tsx","components/Diamond.tsx","components/Round.tsx","components/Longcapsule.tsx","components/Tall.tsx","components/Pillar.tsx","components/Enemy.tsx","components/AddButton.tsx","components/Spike.tsx","components/ItemDashboard.tsx","components/LevelWindowItem.tsx","components/LevelWindow.tsx","App.tsx","index.tsx"],"names":["module","exports","Turret","gc","info","update","selected","id","world","useState","isOpen","setIsOpen","pos","shrink","texture","entitytype","cooldown","direction","bodytype","density","posState","shrinkState","textureState","densityState","bodytypeState","entitytypeState","cooldownState","directionState","convertedPos","bounds","updatedState","ButtonGroup","style","width","Button","color","onClick","backgroundColor","marginBottom","isOpened","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onBlur","e","target","value","defaultValue","display","height","opacity","position","left","bottom","World","gravity","backgroundPres","backgroundPast","diamondshape","capsuleshape","roundshape","heavy_density","friction","restitution","bullet_offset","effect_volume","gravityState","boundsState","backgroundPastState","backgroundPresState","diamondshapeState","capsuleshapeState","roundshapeState","densityShape","heavy_densityState","frictionState","restitutionState","bullet_offsetState","effect_volumeState","Door","size","sensor","nextlevel","space","console","log","sizeState","sensorState","nextlevelState","spaceState","default","Value","toString","Avatar","avatarstanding","avatarcrouching","avatardashing","avatarfalling","avatarstandingState","avatarcrouchingState","avatardashingState","avatarfallingState","Capsule","name","nameState","resitution","Diamond","Round","Longcapsule","Tall","Pillar","Enemy","aitype","aitypeState","AddButton","gameObjects","updateTurret","updateEnemy","updatePlatform","numPlat","updateNumPlat","updateSpike","avatar","door","turrets","diamonds","rounds","enemies","capsules","isCheckedTurret","setIsCheckedTurret","isCheckedEnemy","setIsCheckedEnemy","isCheckedPlatform","setIsCheckedPlatform","isCheckedSpike","setIsCheckedSpike","posStateTurret","shrinkStateTurret","textureStateTurret","densityStateTurret","bodytypeStateTurret","entitytypeStateTurret","cooldownStateTurret","directionStateTurret","posStateEnemy","shrinkStateEnemy","densityStateEnemy","bodytypeStateEnemy","entitytypeStateEnemy","cooldownStateEnemy","aitypeStateEnemy","platformType","posStatePlatform","bodytypeStatePlatform","densityStatePlatform","frictionStatePlatform","restitutionStatePlatform","spaceStatePlatform","posStateSpike","bodytypeStateSpike","densityStateSpike","frictionStateSpike","restitutionStateSpike","textureStateSpike","spaceStateSpike","angleStateSpike","itemTypeStyle","marginLeft","UncontrolledCollapse","toggler","Form","inline","FormGroup","Label","check","onChange","type","defaultChecked","newTurret","newEnemy","newKey","time","newPlatform","newSpike","angle","Spike","angleState","windowStyling","background","float","overflow","ItemDashboard","gameObjectsInput","updateNumPlatApp","numEnemy","updateNumEnemyApp","JSON","parse","stringify","setGameObjects","spikes","talls","longcapsules","pillars","updateTurretState","newTurr","newTurrets","add","Object","entries","key","updateNumEnemy","newGameObjects","updateCapsuleState","newCap","newCapsules","updateDiamondState","newDia","newDiamonds","updateRoundState","newRound","newRounds","updateTallState","newTall","newTalls","updateLongcapsuleState","newLongcapsule","newLongcapsules","updatePillarState","newPillar","newPillars","updateEnemyState","newEnemies","n","updateSpikeState","newSpikes","keys","length","Divider","variant","newWorld","newDoor","newAva","componentList","components","push","Math","random","className","LevelWindowItem","temp","texturePres","idInput","texturePast","posInput","updatePosInput","centered","scaleY","scaleX","lineX1","lineY1","lineX2","lineY2","setHeight","setWidth","hoverOpacity","setHoverOpacity","coords","x1","undefined","x2","y1","y2","imgStyle","transform","styles","DraggableItem","onStop","data","x","y","Tooltip","title","aria-label","onMouseEnter","onMouseLeave","ref","el","src","onLoad","naturalWidth","naturalHeight","alt","zIndex","stroke","strokeWidth","minHeight","minWidth","LevelWindow","backgroundPastPath","gameObjectState","backgroundPresPath","updateState","gameCoordToPx","updatePos","p","px","includes","newGS","windowItems","top","level","levelInit","spikeshape","presentcapsule1","pastcapsule1","presentdiamond1","pastdiamond1","pastdiamond2","presentround1","presentround2","pastround1","enemy1","enemy2","turret1","turret2","spike0","spike1","containerStyling","headerStyling","padding","App","setWorld","setAvatar","setDoor","setTurrets","setCapsules","setDiamonds","setRounds","setEnemies","setSpikes","setPillars","setTalls","setLongcapsules","setNumPlat","setNumEnemy","editorObjects","newState","tester","present_background","past_background","rename","base","objects","index","newObject","reader","FileReader","onload","newJSON","result","reformat","htmlFor","fontSize","objectData","filename","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","exportToJson","files","readAsText","open","map","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,cAAgB,gC,gPC6HnBC,EAlGkB,SAAC,GAAyC,IAcpDC,EAdYC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG5CC,oBAAS,GAHmC,mBAGjEC,EAHiE,KAGzDC,EAHyD,KAIjEC,EAA4ER,EAA5EQ,IAAKC,EAAuET,EAAvES,OAAQC,EAA+DV,EAA/DU,QAASC,EAAsDX,EAAtDW,WAAYC,EAA0CZ,EAA1CY,SAAUC,EAAgCb,EAAhCa,UAAWC,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAEpEC,EAAUR,EACVS,EAAcR,EACdS,EAAeR,EACfS,EAAeJ,EACfK,EAAgBN,EAChBO,EAAkBV,EAClBW,EAAgBV,EAChBW,EAAiBV,EAIjBW,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACf,MAAO,CACHlB,IAAKQ,EACLP,OAAQQ,EACRP,QAASQ,EACTH,QAASI,EACTL,SAAUM,EACVT,WAAWU,EACXT,SAASU,EACTT,UAAUU,IAOlB,OACE,6BACE,kBAACI,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAACK,gBAAiB,UAAWC,aAAc,SAAW/B,GACnH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,EAAEyB,EAAEC,OAAOC,MAAM3B,EAAY,IAAKhB,EAAOyB,IAAgBvB,IAAM0C,aAAgBpC,EAAO,KACzH,kBAAC+B,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,CAACA,EAAY,IAAIyB,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBpC,EAAO,MAE7H,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMrB,EAAkBqB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBlC,KAEzG,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMpB,GAAiBoB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBjC,KAExG,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMnB,EAAiB,EAAEmB,EAAEC,OAAOC,MAAO/B,EAAU,IAAKZ,EAAOyB,IAAgBvB,IAAM0C,aAAgBhC,EAAU,KAC/H,kBAAC2B,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMnB,EAAiB,CAACV,EAAU,IAAK6B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBhC,EAAU,MAEnI,yBAAKe,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAK,GAAK2B,OAAO3B,EAAa,SCIvL4B,EA/FiB,SAAC,GAA6B,IAA5BpD,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAOC,EAAc,EAAdA,SAAc,EAG/BG,oBAAS,GAHsB,mBAGpDC,EAHoD,KAG5CC,EAH4C,KAIpD8C,EAAwKrD,EAAxKqD,QAAS5B,EAA+JzB,EAA/JyB,OAAQ6B,EAAuJtD,EAAvJsD,eAAgBC,EAAuIvD,EAAvIuD,eAAgBC,EAAuHxD,EAAvHwD,aAAcC,EAAyGzD,EAAzGyD,aAAcC,EAA2F1D,EAA3F0D,WAAY3C,EAA+Ef,EAA/Ee,QAAS4C,EAAsE3D,EAAtE2D,cAAeC,EAAuD5D,EAAvD4D,SAAUC,EAA6C7D,EAA7C6D,YAAaC,EAAgC9D,EAAhC8D,cAAeC,EAAiB/D,EAAjB+D,cAK1JC,EAAeX,EACfY,EAAcxC,EACdyC,EAAsBX,EACtBY,EAAsBb,EACtBc,EAAoBZ,EACpBa,EAAoBZ,EACpBa,EAAkBZ,EAClBa,EAAexD,EACfyD,EAAqBb,EACrBc,EAAgBb,EAChBc,EAAmBb,EACnBc,EAAqBb,EACrBc,EAAqBb,EAErBrC,EAAe,WACjB,MAAO,CACH2B,QAAQW,EACRvC,OAAOwC,EACPV,eAAeW,EACfZ,eAAgBa,EAChBX,aAAcY,EACdX,aAAcY,EACdX,WAAYY,EACZvD,QAASwD,EACTZ,cAAea,EACfZ,SAAUa,EACVZ,YAAaa,EACbZ,cAAea,EACfZ,cAAea,IAIrB,OACE,6BACE,kBAAC9C,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAtCb,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAoC2BH,GAAG,QAAQyB,MAAO,CAAEC,MAAO,OAAQK,aAAc,QAA5F,SACA,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMsB,GAAgBtB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAcQ,KAE/F,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAGF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKuB,EAAc,EAAEvB,EAAEC,OAAOC,MAAMqB,EAAY,IAAKhE,EAAOyB,MAAkBmB,aAAcpB,EAAO,KAClH,kBAACe,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKuB,EAAc,CAACA,EAAY,IAAKvB,EAAEC,OAAOC,OAAQ3C,EAAOyB,MAAkBmB,aAAgBpB,EAAO,MAEvH,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,yBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMwB,EAAsBxB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAcU,KAErG,kBAACnB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,yBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMyB,EAAsBzB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAcS,KAErG,kBAAClB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,uBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMiC,GAAsBjC,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAciB,KAErG,kBAAC1B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,uBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMkC,GAAsBlC,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAckB,QCgC9Fc,EA9GgB,SAAC,GAAoC,IAAnC7E,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAOC,EAAqB,EAArBA,SAAUE,EAAW,EAAXA,MAC/CI,EAA0FR,EAA1FQ,IAAKsE,EAAqF9E,EAArF8E,KAAMhE,EAA+Ed,EAA/Ec,SAAUC,EAAqEf,EAArEe,QAAS6C,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASqE,EAA4B/E,EAA5B+E,OAAQC,EAAoBhF,EAApBgF,UAAWC,EAASjF,EAATiF,MADvB,EAErC5E,oBAAS,GAF4B,mBAE1DC,EAF0D,KAElDC,EAFkD,KAGjE2E,QAAQC,IAAIJ,GACZ,IAUqBhF,EAVjBiB,EAAWR,EACX4E,EAAYN,EACZ1D,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf2E,EAAcN,EACdO,EAAiBN,EACjBO,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACLlB,IAAIQ,EACJ8D,KAAKM,EACLtE,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACTZ,YAAYa,EACZhE,QAAQQ,EACR6D,OAAOM,EACPL,UAAUM,EACVL,MAAMM,IASV,OACE,6BACE,kBAACzD,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPb,WACbzB,GAAWD,GACXJ,EAAS,OAAQI,IAK4BH,GAAG,OAAOyB,MAAO,CAAEC,MAAO,OAAQK,aAAc,SAA3F,QACA,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,uBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK1B,EAAS,IAAM0B,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASjF,EAAI,KACjG,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK1B,EAAS,IAAM0B,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASjF,EAAI,MAEnG,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK0C,EAAU,IAAM1C,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASX,EAAK,KACnG,kBAACtC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK0C,EAAU,IAAM1C,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASX,EAAK,MAErG,kBAAC1C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAS3E,KAEhG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAS1E,KAEhG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAS7B,KAEjG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAS5B,KAEpG,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAKxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAS/E,KAE/F,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK2C,EAAiC,QAAlB3C,EAAEC,OAAOC,MAAkB3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASV,EAAOW,cAEjH,kBAACtD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,oBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK4C,GAAkB5C,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAAST,KAElG,kBAAC5C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAAAC,GAAK6C,EAAa7C,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkB8D,SAAO,EAACC,MAASR,KAE7F,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAK,GAAK,KAAM2B,OAAO3B,EAAa,GAAK,GAAK,WCDvMmE,EA7GkB,SAAC,GAAoC,IAe/C5F,EAfYC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAOC,EAAqB,EAArBA,SAAUE,EAAW,EAAXA,MAAW,EAGvCC,oBAAS,GAH8B,mBAG5DC,EAH4D,KAGpDC,EAHoD,KAI5DC,EAA0GR,EAA1GQ,IAAKC,EAAqGT,EAArGS,OAAQC,EAA6FV,EAA7FU,QAASK,EAAoFf,EAApFe,QAASD,EAA2Ed,EAA3Ec,SAAU8E,EAAiE5F,EAAjE4F,eAAgBC,EAAiD7F,EAAjD6F,gBAAiBC,EAAgC9F,EAAhC8F,cAAeC,EAAiB/F,EAAjB+F,cAE5F/E,EAAUR,EACVS,EAAcR,EACdS,EAAeR,EACfS,EAAeJ,EACfK,EAAgBN,EAChBkF,EAAsBJ,EACtBK,EAAuBJ,EACvBK,EAAqBJ,EACrBK,EAAqBJ,EAIrBvE,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACf,MAAO,CACHlB,IAAKQ,EACLP,OAAQQ,EACRP,QAASQ,EACTH,QAASI,EACTL,SAAUM,EACVwE,eAAgBI,EAChBH,gBAAiBI,EACjBH,cAAeI,EACfH,cAAeI,IAOvB,OACE,6BACE,kBAACrE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QANb,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAI2BH,GAAG,QAAQyB,MAAO,CAAEC,MAAO,OAAQK,aAAc,SAA5F,UACA,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,MAAkBmB,aAAgB7C,EAAKQ,IAAI,KACjH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,MAAkBmB,aAAgBrC,EAAI,MAEhH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,EAAEyB,EAAEC,OAAOC,MAAM3B,EAAY,IAAKhB,EAAOyB,MAAkBmB,aAAgBpC,EAAO,KACrH,kBAAC+B,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,CAACA,EAAY,IAAIyB,EAAEC,OAAOC,OAAQ3C,EAAOyB,MAAkBmB,aAAgBpC,EAAO,MAEzH,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,EAAEyB,EAAEC,OAAOC,MAAM3B,EAAY,IAAKhB,EAAOyB,MAAkBmB,aAAgBpC,EAAO,KACrH,kBAAC+B,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,CAACA,EAAY,IAAIyB,EAAEC,OAAOC,OAAQ3C,EAAOyB,MAAkBmB,aAAgBpC,EAAO,MAEzH,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgBnC,KAElG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgB9B,KAEnG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgB/B,KAEnG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMsD,EAAsBtD,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgBkD,KAEzG,kBAAC3D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMuD,EAAuBvD,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgBgD,KAE1G,kBAACzD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMwD,EAAqBxD,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgBiD,KAExG,kBAAC1D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMyD,EAAqBzD,EAAEC,OAAOC,MAAO3C,EAAOyB,MAAkBmB,aAAgBkD,KAExG,yBAAKnE,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAK,GAAI2B,OAAO3B,EAAa,SCFtL4E,EAhGmB,SAAC,GAAyC,IAcrDrG,EAdaC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG7CC,oBAAS,GAHoC,mBAGlEC,EAHkE,KAG1DC,EAH0D,KAIlE8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,UAAWI,IAK2BH,GAAG,UAAUyB,MAAO,CAAEK,gBAAgB,UAAWC,aAAc,SAAW/B,GACrH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCMjLgF,EAhGmB,SAAC,GAAyC,IAcrDzG,EAdaC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG7CC,oBAAS,GAHoC,mBAGlEC,EAHkE,KAG1DC,EAH0D,KAIlE8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCIjLiF,EAjGiB,SAAC,GAAyC,IAenD1G,EAfWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG3CC,oBAAS,GAHkC,mBAGhEC,EAHgE,KAGxDC,EAHwD,KAIhE8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAKbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCQjLkF,EAhGuB,SAAC,GAAyC,IAczD3G,EAdiBC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAGjDC,oBAAS,GAHwC,mBAGtEC,EAHsE,KAG9DC,EAH8D,KAItE8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCMjLmF,EAhGgB,SAAC,GAAyC,IAclD5G,EAdUC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG1CC,oBAAS,GAHiC,mBAG/DC,EAH+D,KAGvDC,EAHuD,KAI/D8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCPjLoF,EAhGkB,SAAC,GAAyC,IAcpD7G,EAdYC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG5CC,oBAAS,GAHmC,mBAGjEC,EAHiE,KAGzDC,EAHyD,KAIjE8F,EAAuErG,EAAvEqG,KAAM7F,EAAiER,EAAjEQ,IAAKoD,EAA4D5D,EAA5D4D,SAAUC,EAAkD7D,EAAlD6D,YAAanD,EAAqCV,EAArCU,QAASuE,EAA4BjF,EAA5BiF,MAAOnE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE/DuF,EAAYD,EACZrF,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EAIbzD,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAGjEC,EAAe,WACjB,MAAO,CACL2E,KAAKC,EACL9F,IAAIQ,EACJF,SAASM,EACTL,QAAQI,EACRyC,SAASa,EACT8B,WAAW7B,EACXhE,QAAQQ,EACR+D,MAAMM,IAOV,OACE,6BACE,kBAAC5D,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GACpB,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,cAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM4D,EAAY5D,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBwD,KAEnG,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,GAAc7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAErG,yBAAKrD,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAI2B,OAAO3B,EAAa,SCOjLqF,EAlGiB,SAAC,GAAyC,IAcnD9G,EAdWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG3CC,oBAAS,GAHkC,mBAGhEC,EAHgE,KAGxDC,EAHwD,KAIhEC,EAAyER,EAAzEQ,IAAKC,EAAoET,EAApES,OAAQC,EAA4DV,EAA5DU,QAASoG,EAAmD9G,EAAnD8G,OAAQnG,EAA2CX,EAA3CW,WAAYC,EAA+BZ,EAA/BY,SAAUE,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAEjEC,EAAUR,EACVS,EAAcR,EACdS,EAAeR,EACfS,EAAeJ,EACfK,EAAgBN,EAChBO,EAAkBV,EAClBW,EAAgBV,EAChBmG,EAAcD,EAIdtF,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAIjEC,EAAe,WACf,MAAO,CACHlB,IAAKQ,EACLP,OAAQQ,EACRP,QAASQ,EACT4F,OAAQC,EACRhG,QAASI,EACTL,SAAUM,EACVT,WAAWU,EACXT,SAASU,IAOjB,OACE,6BACE,kBAACK,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,WAEF,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgB7C,EAAKQ,IAAI,KACrH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,EAAEyB,EAAEC,OAAOC,MAAM3B,EAAY,IAAKhB,EAAOyB,IAAgBvB,IAAM0C,aAAgBpC,EAAO,KACzH,kBAAC+B,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMzB,EAAa,CAACA,EAAY,IAAIyB,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBpC,EAAO,MAE7H,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMrB,EAAkBqB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBlC,KAEzG,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMqE,GAAerE,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBiE,KAEtG,kBAAC1E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMpB,GAAiBoB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBjC,KAExG,yBAAKgB,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAK,GAAI2B,OAAO3B,EAAa,S,gCCkZtLwF,EA3eoB,SAAC,GAAqG,IAAnGC,EAAkG,EAAlGA,YAAaC,EAAqF,EAArFA,aAAcC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,eAAgBC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,GAC1DN,EAAtEO,OAAsEP,EAA9D7G,MAA8D6G,EAAvDQ,KAAuDR,EAAjDS,QAAiDT,EAAxCU,SAAwCV,EAA9BW,OAA8BX,EAAtBY,QAAsBZ,EAAba,SACjBzH,oBAAS,IAF+E,mBAE/H0H,EAF+H,KAE9GC,EAF8G,OAG1F3H,oBAAS,GAHiF,mBAG/H4H,EAH+H,KAG/GC,EAH+G,OAIpF7H,oBAAS,GAJ2E,mBAI/H8H,EAJ+H,KAI5GC,EAJ4G,OAK1F/H,oBAAS,GALiF,mBAK/HgI,EAL+H,KAK/GC,EAL+G,OAMtFjI,oBAAS,GAN6E,gCAOtFA,oBAAS,IAP6E,gCAQ1FA,oBAAS,IARiF,gCAU9GA,oBAAS,IAVqG,mBA0ClIkI,GA1CkI,UA0CjH,CAAC,GAAI,IACtBC,EAAoB,CAAC,MAAQ,SAC7BC,EAAqB,iBACrBC,EAAqB,EACrBC,EAAsB,SACtBC,EAAwB,UACxBC,EAAsB,IACtBC,EAAuB,EAAE,EAAG,GAG5BC,EAAgB,CAAC,GAAI,GACrBC,GAAmB,CAAC,MAAQ,SAE5BC,GAAoB,EACpBC,GAAqB,UACrBC,GAAuB,UACvBC,GAAqB,IACrBC,GAAmB,EAGnBC,GAAe,UAEfC,GAAmB,CAAC,GAAI,GACxBC,GAAwB,SACxBC,GAAuB,EACvBC,GAAwB,GACxBC,GAA2B,GAE3BC,GAAqB,EAGrBC,GAAgB,CAAC,IAAK,KACtBC,GAAqB,SACrBC,GAAoB,EACpBC,GAAqB,GACrBC,GAAwB,GACxBC,GAAoB,SACpBC,GAAkB,EAClBC,GAAkB,EAwElBC,GAAgB,CAClBC,WAAY,OAEd,OACE,6BACE,kBAACxI,EAAA,EAAD,CAAQC,MAAM,YAAY5B,GAAG,UAAUyB,MAAO,CAAEC,MAAO,OAAQI,gBAAiB,UAAWC,aAAc,QAAzG,OACA,kBAACqI,EAAA,EAAD,CAAsB3I,MAAO,CAAEM,aAAc,OAASsI,QAAQ,YAC5D,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,WArJ3B5C,GAAkB,GAClBF,GAAmB,GACnBI,GAAqB,GACrBE,GAAkB,IAkJiCyC,KAAK,QAAQ1E,KAAK,WAAWlG,GAAG,iBAAiByB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IADxI,WACoJ,MAGtJ,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,WApJ3B5C,GAAkB,GAClBF,GAAmB,GACnBI,GAAqB,GACrBE,GAAkB,IAiJgCyC,KAAK,QAAQ1E,KAAK,WAAWlG,GAAG,kBAD1E,UACoG,MAGtG,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,WAnJ3B5C,GAAkB,GAClBF,GAAmB,GACnBI,GAAqB,GACrBE,GAAkB,IAgJmCyC,KAAK,QAAQ1E,KAAK,WAAWlG,GAAG,qBAD7E,aAC6G,MAG/G,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,WAlJ3B5C,GAAkB,GAClBF,GAAmB,GACnBI,GAAqB,GACrBE,GAAkB,IA+IgCyC,KAAK,QAAQ1E,KAAK,WAAWlG,GAAG,qBAD1E,UACuG,OAK3G,kBAAC,WAAD,CAAUgC,SAAU4F,GAClB,kBAAC3F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ6F,EAAiB,EAAE7F,EAAEC,OAAOC,MAAO2F,EAAe,KAAQ1F,aAAc0F,EAAe,KAC/G,kBAAC/F,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ6F,EAAiB,CAACA,EAAe,IAAK7F,EAAEC,OAAOC,QAAWC,aAAc0F,EAAe,MAEjH,kBAACnG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ8F,EAAoB,EAAE9F,EAAEC,OAAOC,MAAO4F,EAAkB,KAAQ3F,aAAc2F,EAAkB,KACxH,kBAAChG,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ8F,EAAoB,CAACA,EAAkB,IAAK9F,EAAEC,OAAOC,QAAWC,aAAc2F,EAAkB,MAQ1H,kBAACpG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQgG,GAAsBhG,EAAEC,OAAOC,OAAUC,aAAc6F,KAEjF,kBAACtG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQiG,EAAsBjG,EAAEC,OAAOC,OAAUC,aAAc8F,KAEjF,kBAAC8B,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAA2C+F,GAAnCG,EAAwB,WAAwD,WAAamC,KAAK,QAAQ1E,KAAK,mBAAmBlG,GAAG,UAAUyB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IADvN,YACoO,MAGtO,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAwC+F,GAAhCG,EAAwB,QAAqD,WAAamC,KAAK,QAAQ1E,KAAK,mBAAmBlG,GAAG,SAD9J,SAC8K,OAIlL,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQmG,GAAuBnG,EAAEC,OAAOC,OAAUC,aAAcgG,KAElF,kBAACzG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQoG,EAAuB,EAAEpG,EAAEC,OAAOC,MAAOkG,EAAqB,KAAQjG,aAAciG,EAAqB,KACjI,kBAACtG,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQoG,EAAuB,CAACA,EAAqB,IAAKpG,EAAEC,OAAOC,QAAWC,aAAciG,EAAqB,MAEnI,kBAAChH,EAAA,EAAD,CAAQE,QAAS,YA9JT,WACd,IACIiJ,EAAY,CACdzK,IAAK+H,EACL9H,OAAQ+H,EACR9H,QAAS+H,EACT1H,QAAS2H,EACT5H,SAAU6H,EACVhI,WAAYiI,EACZhI,SAAUiI,EACVhI,UAAWiI,GAEb5B,EAAa+D,EAXA,UA6JkBA,KAAzB,WAIF,kBAAC,WAAD,CAAU9I,SAAU8F,GAClB,kBAACwC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQyG,GAAuB,WAAc4B,KAAK,QAAQ1E,KAAK,kBAAkBlG,GAAG,UAAUyB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IAD9J,YAC2K,MAG7K,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQyG,GAAuB,QAAW4B,KAAK,QAAQ1E,KAAK,kBAAkBlG,GAAG,SADrG,SACqH,OAIzH,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQqG,EAAgB,EAAErG,EAAEC,OAAOC,MAAOmG,EAAc,KAAQlG,aAAckG,EAAc,KAC5G,kBAACvG,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQqG,EAAgB,CAACA,EAAc,IAAKrG,EAAEC,OAAOC,QAAWC,aAAckG,EAAc,MAE9G,kBAAC3G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,gBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQsG,GAAmB,EAAEtG,EAAEC,OAAOC,MAAOoG,GAAiB,KAAQnG,aAAcmG,GAAiB,KACrH,kBAACxG,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQsG,GAAmB,CAACA,GAAiB,IAAKtG,EAAEC,OAAOC,QAAWC,aAAcmG,GAAiB,MAEvH,kBAACyB,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ2G,GAAmB,GAAM0B,KAAK,QAAQ1E,KAAK,cAAazE,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IADhI,SAC0I,MAG5I,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ2G,GAAmB,GAAM0B,KAAK,QAAQ1E,KAAK,gBADvE,YACgG,MAGlG,kBAACsE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ2G,GAAmB,GAAM0B,KAAK,QAAQ1E,KAAK,gBADvE,OAC2F,MAG7F,kBAACsE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ2G,GAAmB,GAAM0B,KAAK,QAAQ1E,KAAK,gBADvE,OAC2F,OAU/F,kBAACjE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQuG,IAAqBvG,EAAEC,OAAOC,OAAUC,aAAcoG,MAEhF,kBAAC7G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQwG,GAAqBxG,EAAEC,OAAOC,OAAUC,aAAcqG,MAQhF,kBAAC9G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ0G,IAAsB1G,EAAEC,OAAOC,OAAUC,aAAcuG,MAEjF,kBAACtH,EAAA,EAAD,CAAQE,QAAS,YAnOV,WACb,IACIkJ,EAAW,CACb1K,IAAKuI,EACLtI,OAAQuI,GACRtI,QAAS,QAAUyI,GACnBpI,QAASkI,GACTnI,SAAUoI,GACVvI,WAAYwI,GACZvI,SAAUwI,GACVtC,OAAQuC,IAEVlC,EAAY+D,EAXC,SAkOkBA,KAAzB,WAIF,kBAAC,WAAD,CAAU/I,SAAUgG,GAClB,kBAACsC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,WAAcyB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,UAAUyB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IADnJ,YACgK,MAGlK,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,WAAcyB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,YAD7F,YACmH,MAGrH,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,SAAYyB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,UAD3F,UAC6G,MAG/G,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,QAAWyB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,UAD1F,SAC2G,MAG7G,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,eAAkByB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,UADjG,gBACyH,MAG3H,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQ4G,GAAe,UAAayB,KAAK,QAAQ1E,KAAK,eAAelG,GAAG,UAD5F,WAC+G,OAInH,kBAACsK,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQkH,GAAqB,GAAMmB,KAAK,QAAQ1E,KAAK,QAAQlG,GAAG,UAAUyB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IAD1I,YACuJ,MAGzJ,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQkH,GAAqB,GAAMmB,KAAK,QAAQ1E,KAAK,QAAQlG,GAAG,SADpF,SACoG,MAGtG,kBAACwK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQkH,GAAqB,GAAMmB,KAAK,QAAQ1E,KAAK,QAAQlG,GAAG,SADpF,SACoG,OAUxG,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ6G,GAAmB,EAAE7G,EAAEC,OAAOC,MAAO2G,GAAiB,KAAQ1G,aAAc0G,GAAiB,KACrH,kBAAC/G,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ6G,GAAmB,CAACA,GAAiB,IAAK7G,EAAEC,OAAOC,QAAWC,aAAc0G,GAAiB,MAQvH,kBAACnH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ+G,IAAwB/G,EAAEC,OAAOC,OAAUC,aAAc4G,MAEnF,kBAACrH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ8G,GAAwB9G,EAAEC,OAAOC,OAAUC,aAAc2G,MAEnF,kBAACpH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQgH,IAAyBhH,EAAEC,OAAOC,OAAUC,aAAc6G,MAEpF,kBAACtH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQiH,IAA4BjH,EAAEC,OAAOC,OAAUC,aAAc8G,MAQvF,kBAAC7H,EAAA,EAAD,CAAQE,QAAS,YA9SP,SAAC+I,GACjB,IACII,EADAC,EAAO,cAYXD,GATEC,EADyB,IAAvBxB,GACK,UACyB,IAAvBA,GACF,OACyB,IAAvBA,GACF,OAEA,kBAGOmB,EAChB,IAAIM,EAAc,CAChBhF,KAAM+E,EAAO,IAAM9B,GACnB9I,IAAK+I,GACLzI,SAAU0I,GACVzI,QAAS0I,GACT7F,SAAU8F,GACV7F,YAAa8F,GACbjJ,QAAS0K,EAAO,IAAM9B,GACtBrE,MAAO2E,IAETtC,EAAcD,EAAU,GACxBD,EAAeiE,EAAaF,EAAQ7B,IAqRL+B,CAAY/B,MAArC,WAEF,kBAAC,WAAD,CAAUnH,SAAUkG,GAClB,kBAACoC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQyH,GAAkB,GAAMY,KAAK,QAAQ1E,KAAK,QAAQlG,GAAG,UAAUyB,MAAO,CAAE0I,WAAY,OAASU,gBAAc,IADvI,YACoJ,MAGtJ,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACH,QAAM,EAAC9I,MAAOyI,IACzB,kBAAC7H,EAAA,EAAD,CAAOsI,SAAU,SAACpI,GAAQyH,GAAkB,GAAMY,KAAK,QAAQ1E,KAAK,QAAQlG,GAAG,SADjF,SACiG,OAIrG,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQmH,GAAgB,EAAEnH,EAAEC,OAAOC,MAAOiH,GAAc,KAAQhH,aAAcgH,GAAc,KAC5G,kBAACrH,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQmH,GAAgB,CAACA,GAAc,IAAKnH,EAAEC,OAAOC,QAAWC,aAAcgH,GAAc,MAE9G,kBAACzH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQqH,IAAqBrH,EAAEC,OAAOC,OAAUC,aAAckH,MAEhF,kBAAC3H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQoH,GAAqBpH,EAAEC,OAAOC,OAAUC,aAAciH,MAEhF,kBAAC1H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQsH,IAAsBtH,EAAEC,OAAOC,OAAUC,aAAcmH,MAEjF,kBAAC5H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQuH,IAAyBvH,EAAEC,OAAOC,OAAUC,aAAcoH,MAEpF,kBAAC7H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQwH,GAAoBxH,EAAEC,OAAOC,OAAUC,aAAcqH,MAE/E,kBAAC9H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEF,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAQ0H,IAAmB1H,EAAEC,OAAOC,OAAUC,aAAcuH,MAE9E,kBAACtI,EAAA,EAAD,CAAQE,QAAS,YAtXV,WACb,IACIsJ,EAAW,CACb9K,IAAKqJ,GACL/I,SAAUgJ,GACV/I,QAASgJ,GACTnG,SAAUoG,GACVnG,YAAaoG,GACbvJ,QAASwJ,GACTjF,MAAOkF,GACPoB,MAAOnB,IAET7C,EAAY+D,EAXC,SAqXkBA,KAAzB,cCpYKE,EAnGiB,SAAC,GAAyC,IAgBnDzL,EAhBWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAAW,EAG3CC,oBAAS,GAHkC,mBAGhEC,EAHgE,KAGxDC,EAHwD,KAIhEC,EAAwER,EAAxEQ,IAAKM,EAAmEd,EAAnEc,SAAUC,EAAyDf,EAAzDe,QAAS6C,EAAgD5D,EAAhD4D,SAAUC,EAAsC7D,EAAtC6D,YAAanD,EAAyBV,EAAzBU,QAASuE,EAAgBjF,EAAhBiF,MAAOsG,EAASvL,EAATuL,MAElEvK,EAAUR,EACVY,EAAgBN,EAChBK,EAAeJ,EACf0D,EAAgBb,EAChBc,EAAmBb,EACnB3C,EAAeR,EACf6E,EAAaN,EACbwG,EAAaF,EAMb/J,EAFK,CAAS,KADGzB,EAGYS,GAFpB,GAAYJ,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,IAIjEC,EAAe,WACjB,MAAO,CACLlB,IAAKQ,EACLF,SAAUM,EACVL,QAASI,EACTyC,SAAUa,EACVZ,YAAaa,EACbhE,QAASQ,EACT+D,MAAOM,EACPgG,MAAOE,IAOX,OACE,6BACE,kBAAC9J,EAAA,EAAD,CAAaC,MAAS,CAACC,MAAO,SAC5B,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAPf,WACbzB,GAAWD,GACXJ,EAAS,QAASI,IAK6BH,GAAG,QAAQyB,MAAO,CAAEK,gBAAiB,UAAWC,aAAc,SAAW/B,GACpH,kBAAC2B,EAAA,EAAD,CAAQC,MAAM,SAASC,QAAW,kBAAM/B,EAAO,SAAUE,IAAKA,GAAG,SAASyB,MAAO,CAAEM,aAAc,SAAjG,MAEF,kBAAC,WAAD,CAAUC,SAAU7B,GAClB,kBAAC8B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,EAAE0B,EAAEC,OAAOC,MAAM5B,EAAS,IAAKf,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,KAChH,kBAACgC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM1B,EAAU,CAACA,EAAS,IAAI0B,EAAEC,OAAOC,OAAQ3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBrC,EAAI,MAEpH,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMxB,EAAewB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBnC,KAEtG,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,iBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMvB,GAAgBuB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB9B,KAEvG,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,kBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+B,GAAiB/B,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBe,KAExG,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,qBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMgC,GAAoBhC,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBgB,KAE3G,kBAACzB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,mBAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAMtB,EAAgBsB,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB/B,KAEvG,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM6C,EAAa7C,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgBoC,KAEpG,kBAAC7C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,eAEA,kBAACC,EAAA,EAAD,CAAOC,OAAQ,SAACC,GAAM+I,GAAc/I,EAAEC,OAAOC,MAAO3C,EAAOyB,IAAgBvB,IAAM0C,aAAgB0I,KAErG,yBAAK3J,MAAS,CAACkB,QAASxC,EAAS,QAAS,OAAOyC,OAAO,OAAQlB,MAAO,OAAQI,gBAAgB,SAAUe,QAAS,MAAOC,SAAS,WAAYC,KAAK1B,EAAa,GAAK,GAAI2B,OAAO3B,EAAa,S,QC1E/LkK,EAAgC,CAClC3I,OAAQ,OACRlB,MAAO,OACP8J,WAAY,UACZ7I,QAAS,eACT8I,MAAO,QACPC,SAAU,UAubCC,EAjbyB,SAAC,GAAkG,IAAjGC,EAAgG,EAAhGA,iBAAkB9L,EAA8E,EAA9EA,OAAQC,EAAsE,EAAtEA,SAAUmH,EAA4D,EAA5DA,QAAS2E,EAAmD,EAAnDA,iBAAkBC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,kBAAuB,EAClG7L,mBAAc8L,KAAKC,MAAMD,KAAKE,UAAUN,KAD0D,mBACjI9E,EADiI,KACpHqF,EADoH,KAExIpH,QAAQC,IAAI,oBAAqB8B,GAFuG,IAGnI7G,EAA2G6G,EAA3G7G,MAAOoH,EAAoGP,EAApGO,OAAQC,EAA4FR,EAA5FQ,KAAMC,EAAsFT,EAAtFS,QAASC,EAA6EV,EAA7EU,SAAUC,EAAmEX,EAAnEW,OAAQC,EAA2DZ,EAA3DY,QAASC,EAAkDb,EAAlDa,SAAUyE,EAAwCtF,EAAxCsF,OAAQC,EAAgCvF,EAAhCuF,MAAOC,EAAyBxF,EAAzBwF,aAAcC,EAAWzF,EAAXyF,QACrGxH,QAAQC,IAAI,cAAeoH,GAyY3B,IAvYA,IA2DII,EAAoB,SAACC,EAAazM,GAAe,IAC9CqH,EAA4EP,EAA5EO,OAAOpH,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,SAAUyE,EAAUtF,EAAVsF,OACnEM,EAAanF,EACboF,GAAM,EACV,GAAe,UAAXF,SACKC,EAAW1M,OACd,CACJ,cAAyB4M,OAAOC,QAAQtF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCuF,EAAwC,UAChD,GAAGA,GAAO9M,EAAG,CACX0M,EAAWI,GAAOL,EAClBE,GAAM,EACN,OAGDA,IAAK3M,GAAW8L,EAAW,EAAIiB,EAAejB,EAAW,GAAIY,EAAW1M,GAAMyM,GAEnF,IAAIO,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQmF,EACR/E,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAGbC,EAAqB,SAACC,EAAYlN,GAAe,IAC9CqH,EAA4EP,EAA5EO,OAAOpH,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,SAAUyE,EAAUtF,EAAVsF,OACnEe,EAAcxF,EACdgF,GAAM,EACV,GAAa,UAAVO,SACMC,EAAYnN,OACd,CACL,cAAyB4M,OAAOC,QAAQlF,GAAxC,eAAmD,CAAC,IAAD,sBAAzCmF,EAAyC,UACjD,GAAGA,GAAO9M,EAAG,CACXmN,EAAYL,GAAOI,EACnBP,GAAM,EACN,OAGDA,IAAKQ,EAAYnN,GAAMkN,GAE5B,IAAIF,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASwF,EACT3F,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAEbI,EAAqB,SAACC,EAAYrN,GAAe,IAC9CqH,EAA4EP,EAA5EO,OAAOpH,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,SAAUyE,EAAUtF,EAAVsF,OACnEkB,EAAc9F,EACdmF,GAAM,EACV,GAAa,UAAVU,SACMC,EAAYtN,OACd,CACL,cAAyB4M,OAAOC,QAAQrF,GAAxC,eAAmD,CAAC,IAAD,sBAAzCsF,EAAyC,UACjD,GAAGA,GAAO9M,EAAG,CACXsN,EAAYR,GAAOO,EACnBV,GAAM,EACN5H,QAAQC,IAAI,WAAYhF,GACxB,OAGD2M,IACDW,EAAYtN,GAAMqN,GAGtB,IAAIL,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAAS8F,EACT7F,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVxH,QAAQC,IAAI,iCAAkCgI,GAC9ClN,EAAOkN,GACPb,EAAea,IAEbO,EAAmB,SAACC,EAAcxN,GAAe,IAC9CqH,EAA4EP,EAA5EO,OAAOpH,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,SAAUyE,EAAUtF,EAAVsF,OACnEqB,EAAYhG,EACZkF,GAAM,EACV,GAAgB,UAAZa,SACKC,EAAUzN,OACd,CACH,cAAyB4M,OAAOC,QAAQpF,GAAxC,eAAiD,CAAC,IAAD,sBAAvCqF,EAAuC,UAC/C,GAAGA,GAAO9M,EAAG,CACXyN,EAAUX,GAAOU,EACjBb,GAAM,EACN,OAGDA,IAAKc,EAAUzN,GAAMwN,GAE1B,IAAIR,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOgG,EACP/F,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAEbU,EAAkB,SAACC,EAAa3N,GAClC,IAAI4N,EAAWvB,EACXM,GAAM,EACV,GAAe,UAAXgB,SACKC,EAAS5N,OACb,CACH,cAAyB4M,OAAOC,QAAQR,GAAxC,eAAgD,CAAC,IAAD,sBAAtCS,EAAsC,UAC9C,GAAGA,IAAQ9M,EAAG,CACZ4N,EAASd,GAAOa,EAChBhB,GAAM,EACN,OAGDA,IAAKiB,EAAS5N,GAAM2N,GAEzB5I,QAAQC,IAAI4I,GACZ,IAAIZ,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMuB,EACNtB,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAEba,EAAyB,SAACC,EAAoB9N,GAChD,IAAI+N,EAAkBzB,EAClBK,GAAM,EACV,GAAsB,WAAlBmB,SACKC,EAAgB/N,OACpB,CACH,cAAyB4M,OAAOC,QAAQR,GAAxC,eAAgD,CAAC,IAAD,sBAAtCS,EAAsC,UAC9C,GAAGA,IAAQ9M,EAAG,CACZ+N,EAAgBjB,GAAOgB,EACvBnB,GAAM,EACN,OAGDA,IAAKoB,EAAgB/N,GAAM8N,GAEhC,IAAId,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAayB,EACbxB,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAEbgB,EAAoB,SAACC,EAAejO,GACtC,IAAIkO,EAAa3B,EACbI,GAAM,EACV,GAAiB,UAAbsB,SACKC,EAAWlO,OACf,CACH,cAAyB4M,OAAOC,QAAQR,GAAxC,eAAgD,CAAC,IAAD,sBAAtCS,EAAsC,UAC9C,GAAGA,IAAQ9M,EAAG,CACZkO,EAAWpB,GAAOmB,EAClBtB,GAAM,EACN,OAGDA,IAAKuB,EAAWlO,GAAMiO,GAE3B,IAAIjB,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQ2B,GAEVpO,EAAOkN,GACPb,EAAea,IAEbmB,EAAmB,SAACpD,EAAc/K,GAAe,IAC9CqH,EAA4EP,EAA5EO,OAAOpH,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,SAAUyE,EAAUtF,EAAVsF,OACnEgC,EAAa1G,EACbiF,GAAM,EACV,GAAgB,UAAZ5B,SACKqD,EAAWpO,OACf,CACH,cAAyB4M,OAAOC,QAAQnF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCoF,EAAwC,UAChD,GAAGA,GAAO9M,EAAG,CACXoO,EAAWtB,GAAO/B,EAClB4B,GAAM,EACN,OAGDA,IAAK3M,GAAW8L,EAAW,EAAIiB,EAAejB,EAAW,GAAIsC,EAAWpO,GAAM+K,GAEnF,IAAIiC,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQ0G,EACRhC,OAAQA,EACRC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAoBbD,EAAiB,SAACsB,GACpBtC,EAAkBsC,IAEhBC,EAAmB,SAACnD,EAAcnL,GACpC+E,QAAQC,IAAI,aAAc8B,GAC1B,IAAIyH,EAAYnC,EACZO,GAAM,EACV,GAAgB,UAAZxB,SACKoD,EAAUvO,OACd,CACH,cAAyB4M,OAAOC,QAAQT,GAAxC,eAAiD,CAAC,IAAD,sBAAvCU,EAAuC,UAC/C,GAAGA,GAAO9M,EAAG,CACXuO,EAAUzB,GAAO3B,EACjBwB,GAAM,EACN,OAGDA,IAA2C4B,EAAtCvO,GAAU4M,OAAO4B,KAAKpC,GAAQqC,QAAwBtD,GAEhE,IAAI6B,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOmC,EACPlC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IAhYuH,EAmY9F9M,mBAAc,CACtD,kBAAC,EAAD,CAAWkH,YAAekH,EAAkBnH,cAzC1B,SAACkH,GACnBxC,EAAiBwC,IAwC2DnH,QAAWA,EAAS4F,IAAO,MAAOhG,YAAcA,EAAaE,YAAemH,EAAkBpH,aAAgByF,EAAmBvF,eAxD7L,SAACiE,EAAiBlL,EAAW4K,GAChC,UAATA,EACF2C,EAAiBrC,EAAalL,GAAKkH,EAAU,IAC3B,YAAT0D,EACTwC,EAAmBlC,EAAalL,GAAOkH,EAAU,IAC/B,YAAT0D,EACTqC,EAAmB/B,EAAalL,GAAOkH,EAAU,IAC/B,gBAAT0D,EACTiD,EAAuB3C,EAAalL,GAAOkH,EAAU,IACnC,SAAT0D,EACT8C,EAAgBxC,EAAalL,GAAOkH,EAAU,IAC5B,WAAT0D,GACToD,EAAkB9C,EAAalL,GAAOkH,EAAU,OA6ClD,kBAACwH,EAAA,EAAD,CAASC,QAAQ,WACjB,kBAAC,EAAD,CAAO7B,IAAOd,KAAKE,UAAUpF,GAAe,SAAUjH,KAAQiH,EAAY7G,MAAOH,OAhY5D,SAAC8O,GAEtB,IAAI5B,EAAiB,CACnB/M,MAAM2O,EACNvH,OAAOA,EACPC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IA+W8FjN,SAAYA,IACzH,kBAAC2O,EAAA,EAAD,CAASC,QAAQ,WACjB,kBAAC,EAAD,CAAM1O,MAAS6G,EAAY7G,MAAO6M,IAAOd,KAAKE,UAAUpF,GAAe,QAASjH,KAAQiH,EAAYQ,KAAMxH,OA9WtF,SAAC+O,GAAiB,IACjC5O,EAAuE6G,EAAvE7G,MAAOoH,EAAgEP,EAAhEO,OAAQE,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QAC3CsF,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOA,EACPC,KAAKuH,EACLtH,QAAQA,EACRI,SAN0Eb,EAApBa,SAOtDH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAV0EtF,EAAVsF,OAWhEC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IA6VsHjN,SAAYA,IACjJ,kBAAC,EAAD,CAAQE,MAAS6G,EAAY7G,MAAO6M,IAAOd,KAAKE,UAAUpF,GAAe,UAAWjH,KAAQiH,EAAYO,OAAQvH,OA3V1F,SAACgP,GAAgB,IAClC7O,EAAqE6G,EAArE7G,MAAOqH,EAA8DR,EAA9DQ,KAAMC,EAAwDT,EAAxDS,QAASC,EAA+CV,EAA/CU,SAAUC,EAAqCX,EAArCW,OAAQC,EAA6BZ,EAA7BY,QACzCsF,EAAiB,CACnB/M,MAAMA,EACNoH,OAAOyH,EACPxH,KAAKA,EACLC,QAAQA,EACRI,SANwEb,EAApBa,SAOpDH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAVwEtF,EAAVsF,OAW9DC,MAAMA,EACNC,aAAaA,EACbC,QAAQA,GAEVzM,EAAOkN,GACPb,EAAea,IA0U8HjN,SAAYA,MAzYnB,mBAmYjIgP,GAnYiI,KA4YpIC,IA5YoI,KA4YvHD,IACjB,QAAyBnC,OAAOC,QAAQ/F,EAAYS,SAApD,kBAA8D,CAAC,IAAD,yBAApDuF,GAAoD,MAA/CrK,GAA+C,MAC5DuM,GAAWC,KAAK,kBAAC,EAAD,CAAQhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAKjN,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAU0M,EAAmBzM,SAAYA,KAErI,gBAAyB6M,OAAOC,QAAQ/F,EAAYa,UAApD,kBAA+D,CAAC,IAAD,yBAArDmF,GAAqD,MAAhDrK,GAAgD,MAC7DuM,GAAWC,KAAK,kBAAC,EAAD,CAAShP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUmN,EAAoBlN,SAAYA,KAEvJ,gBAAyB6M,OAAOC,QAAQ/F,EAAYU,UAApD,kBAA+D,CAAC,IAAD,yBAArDsF,GAAqD,MAAhDrK,GAAgD,MAC7DuM,GAAWC,KAAK,kBAAC,EAAD,CAAShP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUsN,EAAoBrN,SAAYA,KAEvJ,gBAAyB6M,OAAOC,QAAQ/F,EAAYW,QAApD,kBAA6D,CAAC,IAAD,yBAAnDqF,GAAmD,MAA9CrK,GAA8C,MAC3DuM,GAAWC,KAAK,kBAAC,EAAD,CAAOhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUyN,EAAkBxN,SAAYA,KAEnJ,gBAAyB6M,OAAOC,QAAQ/F,EAAYwF,cAApD,kBAAmE,CAAC,IAAD,yBAAzDQ,GAAyD,MAApDrK,GAAoD,MACjEuM,GAAWC,KAAK,kBAAC,EAAD,CAAahP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAU+N,EAAwB9N,SAAYA,KAE/J,gBAAyB6M,OAAOC,QAAQ/F,EAAYuF,OAApD,kBAA4D,CAAC,IAAD,yBAAlDS,GAAkD,MAA7CrK,GAA6C,MAC1DuM,GAAWC,KAAK,kBAAC,EAAD,CAAMhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAU4N,EAAiB3N,SAAYA,KAEjJ,gBAAyB6M,OAAOC,QAAQ/F,EAAYyF,SAApD,kBAA8D,CAAC,IAAD,yBAApDO,GAAoD,MAA/CrK,GAA+C,MAC5DuM,GAAWC,KAAK,kBAAC,EAAD,CAAQhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAMoC,KAAKC,SAAUtP,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUkO,EAAmBjO,SAAYA,KAErJ,gBAAyB6M,OAAOC,QAAQ/F,EAAYY,SAApD,kBAA8D,CAAC,IAAD,yBAApDoF,GAAoD,MAA/CrK,GAA+C,MAC5DuM,GAAWC,KAAK,kBAAC,EAAD,CAAOhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAKjN,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUqO,EAAkBpO,SAAYA,KAEnI,gBAAyB6M,OAAOC,QAAQ/F,EAAYsF,QAApD,kBAA6D,CAAC,IAAD,yBAAnDU,GAAmD,MAA9CrK,GAA8C,MAC3DuM,GAAWC,KAAK,kBAAC,EAAD,CAAOhP,MAAS6G,EAAY7G,MAAO6M,IAAOA,GAAKjN,KAAQ4C,GAAOzC,GAAM8M,GAAKhN,OAAUwO,EAAkBvO,SAAYA,KAGnI,OACE,yBAAKqP,UAAU,gBAAgB3N,MAAS8J,GACnCyD,K,0CC9XMK,EAnE0B,SAAC,GAAsI,IAO1KC,EAPsCC,EAAmI,EAAnIA,YAA0BC,GAAyG,EAAtHC,YAAsH,EAAzGD,SAASE,EAAgG,EAAhGA,SAAUC,EAAsF,EAAtFA,eAAgBC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,OAAQC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQ9E,EAAY,EAAZA,MAAY,EACzJlL,mBAAiBsP,GADwI,mBACtKxP,EADsK,aAEjJE,mBAAS,KAFwI,mBAEtK0C,EAFsK,KAE9JuN,EAF8J,OAGnJjQ,mBAAS,IAH0I,mBAGtKwB,EAHsK,KAG/J0O,EAH+J,OAIrIlQ,mBAAS,GAJ4H,mBAItKmQ,EAJsK,KAIxJC,EAJwJ,KAiBzKC,EAAS,CAAEC,QATaC,WAAXV,EAAwBA,EAAS,EAS/BW,QARSD,WAAXR,EAAwBA,EAAS,GAQ3BU,QANMF,WAAXT,EAAwBA,EAAS,EAMxBY,QAJEH,WAAXP,EAAwBA,EAAS,IAK/CW,EAAW,CACbnP,MAAOA,EAAQoO,EACflN,OAAQA,EAASiN,EAAS,KAC1BiB,UAAW,gBAPsBL,WAAVrF,EAAuBA,EAAQ,GAOlB,OACpCvI,QAASwN,GAGX,OAGE,yBAAKjB,UAAW2B,IAAOC,eACrB,kBAAC,IAAD,CAAWC,OAAQ,SAAC1O,EAAG2O,GAAJ,OAAavB,EAAe,CAAED,EAAS,GAAKwB,EAAKC,EAAIzB,EAAS,GAAKwB,EAAKE,GAAI5B,KAC7F,yBAAK/N,MAAS,CACVC,MAAOA,EAAQoO,EACflN,OAAQA,EAASiN,EAAS,KAC1B/M,SAAU,WACVC,KAAM6M,EAAWF,EAAS,GAAKhO,EAAQoO,EAAS,EAAIJ,EAAS,GAC7D1M,OAAQ4M,EAAWF,EAAS,GAAK9M,EAASiN,EAAS,EAAIH,EAAS,KAEpE,kBAAC2B,EAAA,EAAD,CAASC,MAAStR,EAAIuR,aAAavR,GACjC,yBACEwR,aAAe,kBAAMlB,EAAgB,KACrCmB,aAAe,kBAAMnB,EAAgB,IACrCoB,IAAK,SAAAC,GAAE,OAAIrC,EAAOqC,GAClBC,IAAK,YAAcrC,EAAc,OACjC9N,MAASoP,EACTgB,OAAQ,SAACtP,GAAQ6N,EAASd,EAAKwC,cAAe3B,EAAUb,EAAKyC,gBAC7DC,IAAKzC,OAMX,yBAAK9N,MAAO,CACVwQ,QAAS,EACTvQ,MAAOA,EAAQoO,EAAS,KACxBlN,OAAQA,EAASiN,EAAS,KAC1B/M,SAAU,WACVC,MAAO6M,EAAWF,EAAS,GAAKhO,EAAQoO,EAAS,EAAIJ,EAAS,GAAKhO,EAAQoO,EAAS,GAAK,KACzF9M,OAAQ0M,EAAS,GAAK,GAAK,OAE3B,6BACE,0CAAUa,EAAV,CAAkB2B,OAAO,QAAQC,YAAY,WCnEjD5G,EAAgC,CAClC3I,OAAQ,QACRwP,UAAU,QACVC,SAAU,SACV3Q,MAAO,SACP+J,MAAO,OACP7J,MAAO,UACPkB,SAAU,YA2JCwP,EAxJuB,SAAC,GAkHrC,IAlHgH,IAA1EC,EAAyE,EAAzEA,mBAAwCC,GAAiC,EAArDC,mBAAqD,EAAjCD,iBAAgBE,EAAiB,EAAjBA,YAAiB,EAC1ExS,mBAASsS,GADiE,mBACzG1L,EADyG,KAC5FqF,EAD4F,KAE3GlM,EAAQuS,EAAgBvS,MACxBoH,EAASmL,EAAgBnL,OACzBC,EAAOkL,EAAgBlL,KACvBC,EAAUiL,EAAgBjL,QAC1BI,EAAWb,EAAYa,SACvBH,EAAWV,EAAYU,SACvBC,EAASX,EAAYW,OACrBC,EAAUZ,EAAYY,QACtB0E,EAAStF,EAAYsF,OACrBC,EAAQvF,EAAYuF,MACpBE,EAAUzF,EAAYyF,QACtBD,EAAexF,EAAYwF,aAE3BqG,EAAgB,SAAC/S,GACnB,MAAO,CAAS,IAARA,EAAG,GAAYK,EAAMqB,OAAO,GAAY,IAAR1B,EAAG,GAAWK,EAAMqB,OAAO,KAOjEsR,EAAY,SAACC,EAAiB7S,GAHd,IAAC8S,EAKnB,GADAD,EAHO,EADYC,EAIDD,GAHP,GAAK5S,EAAMqB,OAAO,GAAK,IAAMwR,EAAG,GAAK7S,EAAMqB,OAAO,GAAK,KAIzD,QAANtB,EAEDsH,EAAKjH,IAAMwS,OACN,GAAU,UAAN7S,EACTqH,EAAOhH,IAAMwS,OACR,GAAI7S,EAAG+S,SAAS,UACrB,cAAyBnG,OAAOC,QAAQtF,GAAxC,eAAiD,CAAC,IAAD,sBAAvCuF,EAAuC,UAC5CA,GAAO9M,IACRuH,EAAQuF,GAAKzM,IAAMwS,QAGlB,GAAI7S,EAAG+S,SAAS,WACrB,cAAyBnG,OAAOC,QAAQrF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCsF,EAAwC,UAC7CA,GAAO9M,IACRwH,EAASsF,GAAKzM,IAAMwS,QAGnB,GAAI7S,EAAG+S,SAAS,SACrB,cAAyBnG,OAAOC,QAAQpF,GAAxC,eAAgD,CAAC,IAAD,sBAAtCqF,EAAsC,UAC3CA,GAAO9M,IACRyH,EAAOqF,GAAKzM,IAAMwS,QAGjB,GAAI7S,EAAG+S,SAAS,eACrB,cAAyBnG,OAAOC,QAAQP,GAAxC,eAAsD,CAAC,IAAD,sBAA5CQ,EAA4C,UACjDA,GAAO9M,IACR+E,QAAQC,IAAI,QACZsH,EAAaQ,GAAKzM,IAAMwS,QAGxB,GAAI7S,EAAG+S,SAAS,WACpB,cAAyBnG,OAAOC,QAAQlF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCmF,EAAwC,UAC7CA,GAAO9M,IACR2H,EAASmF,GAAKzM,IAAMwS,QAGnB,GAAI7S,EAAG+S,SAAS,SACrB,cAAyBnG,OAAOC,QAAQnF,GAAxC,eAAiD,CAAC,IAAD,sBAAvCoF,EAAuC,UAC5CA,GAAO9M,IACR0H,EAAQoF,GAAKzM,IAAMwS,QAGlB,GAAI7S,EAAG+S,SAAS,SACrB,cAAyBnG,OAAOC,QAAQT,GAAxC,eAAgD,CAAC,IAAD,sBAAtCU,EAAsC,UAC3CA,GAAO9M,IACRoM,EAAOU,GAAKzM,IAAMwS,QAGjB,GAAI7S,EAAG+S,SAAS,QACrB,cAAyBnG,OAAOC,QAAQR,GAAxC,eAA+C,CAAC,IAAD,sBAArCS,EAAqC,UAC1CA,GAAO9M,IACRqM,EAAMS,GAAKzM,IAAMwS,QAGhB,GAAI7S,EAAG+S,SAAS,UACrB,cAAyBnG,OAAOC,QAAQN,GAAxC,eAAiD,CAAC,IAAD,sBAAvCO,EAAuC,UAC5CA,GAAO9M,IACRuM,EAAQO,GAAKzM,IAAMwS,GAIzB,IAAIG,GAAQ,CACV/S,MAAMA,EACNoH,OAAQA,EACRC,KAAKA,EACLC,QAAQA,EACRI,SAASA,EACTH,SAASA,EACTC,OAAOA,EACPC,QAAQA,EACR0E,OAAOA,EACPG,QAAQA,EACRF,MAAMA,EACNC,aAAaA,GAEfH,EAAe6G,IACfN,EAAYM,KASVC,EAAc,CAChB,kBAAC,EAAD,CAAiBnD,OAAU,GAAY7P,EAAMqB,OAAO,GAAIuO,OAAU,GAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAM9C,IAAO,OAAQyC,YAAeiD,EAAgBlL,KAAK/G,QAASiP,QAAU,OAAOE,SAAYiD,EAAcH,EAAgBlL,KAAKjH,KAAMsP,eAAkBiD,IACrQ,kBAAC,EAAD,CAAiB9C,OAAU,GAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,KAAc5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAM9C,IAAO,SAAUyC,YAAeiD,EAAgBnL,OAAO9G,QAASiP,QAAU,SAASE,SAAYiD,EAAcH,EAAgBnL,OAAOhH,KAAMsP,eAAkBiD,KAElR,MAAyBhG,OAAOC,QAAQtF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCuF,EAAwC,UAChDmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBc,OAAUxI,EAAQuF,GAAKzM,IAAI,GAA+B,GAA1BkH,EAAQuF,GAAKpM,UAAU,GAAQuP,OAAU1I,EAAQuF,GAAKzM,IAAI,GAAI6P,OAAU3I,EAAQuF,GAAKzM,IAAI,GAAI2P,OAAUzI,EAAQuF,GAAKzM,IAAI,GAAiC,GAA5BkH,EAAQuF,GAAKpM,UAAU,GAASoP,OAAU,GAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,KAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAM9C,IAAOA,EAAKyC,YAAehI,EAAQuF,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAcpL,EAAQuF,GAAKzM,KAAMsP,eAAkBiD,KAKlc,cAAyBhG,OAAOC,QAAQlF,GAAxC,eAAmD,CAAC,IAAD,sBAAzCmF,EAAyC,UACjDmG,EAAYhE,KAAK,kBAAE,EAAF,CAAkBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,EAAKyC,YAAe5H,EAASmF,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAchL,EAASmF,GAAKzM,KAAMsP,eAAkBiD,KAEzQ,cAAyBhG,OAAOC,QAAQrF,GAAxC,eAAmD,CAAC,IAAD,sBAAzCsF,EAAyC,UACjDmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,EAAKyC,YAAe/H,EAASsF,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAcnL,EAASsF,GAAKzM,KAAMsP,eAAkBiD,KAExQ,cAAyBhG,OAAOC,QAAQpF,GAAxC,eAAiD,CAAC,IAAD,sBAAvCqF,EAAuC,UAC/CmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,EAAKyC,YAAe9H,EAAOqF,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAclL,EAAOqF,GAAKzM,KAAMsP,eAAkBiD,KAEpQ,cAAyBhG,OAAOC,QAAQnF,GAAxC,eAAkD,CAAC,IAAD,sBAAxCoF,EAAwC,UAChDmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,GAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,KAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAM9C,IAAOA,EAAKyC,YAAe7H,EAAQoF,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAcjL,EAAQoF,GAAKzM,KAAMsP,eAAkBiD,KAErQ,cAAyBhG,OAAOC,QAAQT,GAAxC,eAAiD,CAAC,IAAD,sBAAvCU,EAAuC,UAC/CmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,GAAY7P,EAAMqB,OAAO,GAAIuO,OAAU,EAAU5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAM9C,IAAOA,EAAKyC,YAAenD,EAAOU,GAAKvM,QAASiP,QAAW1C,EAAK4C,SAAYiD,EAAcvG,EAAOU,GAAKzM,KAAMsP,eAAkBiD,EAAWxH,MAASgB,EAAOU,GAAK1B,SAEhS,cAAyBwB,OAAOC,QAAQR,GAAxC,eAAgD,CAAC,IAAD,uBAAtCS,GAAsC,YAC9CmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,GAAKyC,YAAelD,EAAMS,IAAKvM,QAASiP,QAAW1C,GAAK4C,SAAYiD,EAActG,EAAMS,IAAKzM,KAAMsP,eAAkBiD,KAElQ,gBAAyBhG,OAAOC,QAAQN,GAAxC,kBAAkD,CAAC,IAAD,yBAAxCO,GAAwC,YAChDmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,GAAKyC,YAAehD,EAAQO,IAAKvM,QAASiP,QAAW1C,GAAK4C,SAAYiD,EAAcpG,EAAQO,IAAKzM,KAAMsP,eAAkBiD,KAEtQ,gBAAyBhG,OAAOC,QAAQP,GAAxC,kBAAuD,CAAC,IAAD,yBAA7CQ,GAA6C,YACrDmG,EAAYhE,KAAK,kBAAC,EAAD,CAAiBa,OAAU,EAAa7P,EAAMqB,OAAO,GAAIuO,OAAU,IAAY5P,EAAMqB,OAAO,GAAIsO,UAAY,EAAO9C,IAAOA,GAAKyC,YAAejD,EAAaQ,IAAKvM,QAASiP,QAAW1C,GAAK4C,SAAYiD,EAAcrG,EAAaQ,IAAKzM,KAAMsP,eAAkBiD,KAEhR,OACE,yBAAKxD,UAAU,cAAc3N,MAAS8J,GACpC,yBAAK9J,MAAS,CAACqB,SAAS,WAAYoQ,IAAI,MAAOnQ,KAAK,MAAOH,OAAO,QAAQlB,MAAM,SAAUuQ,QAAQ,IAAIL,IAAO,YAAaW,EAAmB,SAC5IU,ICrKHE,EAAQ,EACRC,EAAY,CACdnT,MAAO,CACLiD,SAAU,KACV5B,OAAQ,CAAC,GAAK,IACd6B,eAAgB,sBAChBC,eAAgB,mBAChBC,aAAc,CAAC,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5DC,aAAc,CAAC,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,GAAK,IAAK,GAAK,GAAK,IAC1FC,WAAY,CAAC,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAC9E8P,WAAY,CAAC,IAAM,GAAK,GAAM,IAAM,GAAK,GAAM,GAAK,GAAK,EAAK,GAAK,IAAM,GAAK,IAAM,IACpFzS,QAAS,EACT4C,cAAe,GACfC,SAAU,GACVC,YAAa,GACbC,cAAe,GACfC,cAAe,IAEjB+D,SAAU,CACR2L,gBAAiB,CACfpN,KAAM,kBACN7F,IAAK,CACH,EACA,GAEFM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,kBACTuE,MAAO,GAETyO,aAAc,CACZrN,KAAM,eACN7F,IAAK,CACH,IACA,GAEFM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,eACTuE,MAAO,IAGX0C,SAAU,CACRgM,gBAAiB,CACftN,KAAM,kBACN7F,IAAK,CACH,EACA,GAEFM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,kBACTuE,MAAO,GAET2O,aAAc,CACZvN,KAAM,eACN7F,IAAK,CACH,KACA,KAEFM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,eACTuE,MAAO,GAET4O,aAAc,CACZxN,KAAM,eACN7F,IAAK,CACH,GACA,GAEFM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,eACTuE,MAAO,IAGX2C,OAAQ,CACNkM,cAAe,CACbzN,KAAM,gBACN7F,IAAK,CAAC,KAAM,GACZM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,gBACTuE,MAAO,GAET8O,cAAe,CACb1N,KAAM,gBACN7F,IAAK,CAAE,IAAK,IACZM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,gBACTuE,MAAO,GAET+O,WAAY,CACV3N,KAAM,aACN7F,IAAK,CAAE,EAAK,IACZM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,aACTuE,MAAO,IAGX4C,QAAS,CACPoM,OAAQ,CACNzT,IAAK,CAAC,GAAM,GACZC,OAAQ,CAAC,MAAQ,SACjBC,QAAS,eACTC,WAAY,UACZmG,OAAQ,EACRlG,SAAU,IACVE,SAAU,UACVC,QAAS,GAEXmT,OAAQ,CACN1T,IAAK,CAAC,OAAQ,UACdC,OAAQ,CAAC,MAAQ,SACjBC,QAAS,YACToG,OAAQ,EACRnG,WAAY,OACZC,SAAU,IACVE,SAAU,UACVC,QAAS,IAGbyG,OAAQ,CACNhH,IAAK,CAAC,IAAK,GACXC,OAAQ,CAAC,MAAO,QAChBC,QAAS,OACTK,QAAS,EACTD,SAAU,UACV8E,eAAgB,iBAChBC,gBAAiB,kBACjBC,cAAe,gBACfC,cAAe,iBAEjB0B,KAAM,CACJjH,IAAK,CAAC,KAAM,MACZsE,KAAM,CAAC,KAAM,MACbhE,SAAU,SACVC,QAAS,EACT6C,SAAU,EACVC,YAAa,EACbnD,QAAS,OACTqE,QAAQ,EACRC,UAAW,EACXC,MAAO,GAETyC,QAAS,CACPyM,QAAS,CACP3T,IAAK,CAAC,KAAK,MACXC,OAAQ,CAAC,MAAQ,SACjBC,QAAS,iBACTC,WAAY,UACZC,SAAU,IACVC,UAAW,EAAE,EAAK,GAClBC,SAAU,SACVC,QAAS,GAEXqT,QAAS,CACP5T,IAAK,CAAC,IAAK,GACXC,OAAQ,CAAC,MAAQ,SACjBC,QAAS,cACTC,WAAY,OACZC,SAAU,IACVC,UAAW,CAAC,EAAK,GACjBC,SAAU,SACVC,QAAS,IAGbwL,OAAO,CACL8H,OAAO,CACL7T,IAAK,CAAC,EAAE,GACRM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,SACTuE,MAAO,EACPsG,MAAO,IAET+I,OAAO,CACL9T,IAAK,CAAC,EAAE,GACRM,SAAU,SACVC,QAAS,EACT6C,SAAU,GACVC,YAAa,GACbnD,QAAS,SACTuE,MAAO,EACPsG,MAAO,KAIXkB,aAAa,GAGbD,MAAM,GAGNE,QAAQ,IAMJ6H,EAAmB,CACvBxR,OAAQ,QACRyP,SAAU,SAEV1P,QAAS,QAIL0R,EAAgB,CACpBjC,UAAW,OACXxP,OAAQ,OACRlB,MAAO,OACPiB,QAAS,eACT2R,QAAQ,GAsBV,IA6JeC,EA7JQ,SAAC,GAAQ,qBAEJrU,mBAASkT,EAAUnT,OAFhB,mBAEtBA,EAFsB,KAEfuU,EAFe,OAGDtU,mBAASkT,EAAU/L,QAHlB,mBAGtBA,EAHsB,KAGdoN,EAHc,OAILvU,mBAASkT,EAAU9L,MAJd,mBAItBA,EAJsB,KAIhBoN,EAJgB,OAKCxU,mBAASkT,EAAU7L,SALpB,mBAKtBA,EALsB,KAKboN,EALa,OAMGzU,mBAASkT,EAAUzL,UANtB,mBAMtBA,EANsB,KAMZiN,EANY,OAOG1U,mBAASkT,EAAU5L,UAPtB,mBAOtBA,EAPsB,KAOZqN,EAPY,OAQD3U,mBAASkT,EAAU3L,QARlB,mBAQtBA,EARsB,KAQdqN,EARc,OASC5U,mBAASkT,EAAU1L,SATpB,mBAStBA,EATsB,KASbqN,EATa,OAUD7U,mBAASkT,EAAUhH,QAVlB,mBAUtBA,EAVsB,KAUd4I,EAVc,OAWC9U,mBAASkT,EAAU7G,SAXpB,mBAWtBA,EAXsB,KAWb0I,EAXa,OAYH/U,mBAASkT,EAAU/G,OAZhB,mBAYtBA,EAZsB,KAYf6I,GAZe,QAaWhV,mBAASkT,EAAU9G,cAb9B,qBAatBA,GAbsB,MAaR6I,GAbQ,SAcSjV,mBAAckT,GAdvB,qBActBtM,GAdsB,MAcTqF,GAdS,SAeCjM,mBAAS,GAfV,qBAetBgH,GAfsB,MAebkO,GAfa,SAgBGlV,mBAAS,GAhBZ,qBAgBtB4L,GAhBsB,MAgBZuJ,GAhBY,SAiBKnV,mBAAS,IAAI0M,QAjBlB,qBAoBzB0I,IApByB,YAoBTpV,mBAAS,CAAC,CAACF,GAAG,QAASD,UAAU,MACjD2S,GAAc,SAAC6C,GAAiB,IAC7BtV,EAA2GsV,EAA3GtV,MAAO0H,EAAoG4N,EAApG5N,SAAUH,EAA0F+N,EAA1F/N,SAAUC,EAAgF8N,EAAhF9N,OAAQC,EAAwE6N,EAAxE7N,QAASL,EAA+DkO,EAA/DlO,OAAQC,EAAuDiO,EAAvDjO,KAAMC,EAAiDgO,EAAjDhO,QAAS6E,EAAwCmJ,EAAxCnJ,OAAQG,EAAgCgJ,EAAhChJ,QAASF,EAAuBkJ,EAAvBlJ,MAAOC,EAAgBiJ,EAAhBjJ,aAChGkI,EAASvU,GACTwU,EAAUpN,GACVqN,EAAQpN,GACRqN,EAAWpN,GACXwN,EAAWrN,GACXkN,EAAYjN,GACZkN,EAAYrN,GACZsN,EAAUrN,GACVuN,EAAU5I,GACV6I,EAAW1I,GACX4I,GAAgB7I,GAChB4I,GAAS7I,GACTF,GAAeoJ,IAiCbC,GAAS,CACXtS,QAASjD,EAAMiD,QACf5B,OAAQrB,EAAMqB,OACdmU,mBAAoBxV,EAAMkD,eAC1BuS,gBAAiBzV,EAAMmD,eACvBC,aAAcpD,EAAMoD,aACpBC,aAAcrD,EAAMqD,aACpBC,WAAYtD,EAAMsD,WAClB8P,WAAYpT,EAAMoT,WAClBzS,QAASX,EAAMW,QACf4C,cAAevD,EAAMuD,cACrBC,SAAUxD,EAAMwD,SAChBC,YAAazD,EAAMyD,YACnBC,cAAe1D,EAAM0D,cACrBC,cAAe3D,EAAM2D,cACrB0D,OACAD,SACAE,UACAI,WACAH,WACAC,SACAC,UACA0E,SACAC,QACAE,UACAD,iBAEEqJ,GAAS,SAACC,EAAaC,GAGzB,IAFA,IAAIC,EAAQ,EACRC,EAAgB,GACpB,MAAwBnJ,OAAOC,QAAQgJ,GAAvC,eAAgD,CAAC,IAAD,sBAAlCpT,GAAkC,WAC9CsT,EAAUH,EAAOE,EAAQ,IAAMrT,EAC/BqT,IAEF,OAAOC,GAELC,GAAS,IAAIC,WA+BjB,OA9BAD,GAAOE,OAAS,SAAS3T,GACvB,IAAI4T,EAAcnK,KAAKC,MAAMD,KAAKC,MAAMD,KAAKE,UAAU3J,EAAEC,OAAO4T,OAAO,KAAK,KAC5ErR,QAAQC,IAAI,UAAUmR,GAFQ,IAI1BE,EAAW,CACbpW,MAAM,CACJiD,QAHqGiT,EAApGjT,QAID5B,OAJqG6U,EAA3F7U,OAKV6B,eALqGgT,EAAnFV,mBAMlBrS,eANqG+S,EAA/DT,gBAOtCrS,aAPqG8S,EAA9C9S,aAQvDC,aARqG6S,EAAhC7S,aASrEC,WATqG4S,EAAlB5S,YAWrF+D,KAAK6O,EAAQ7O,KACbD,OAAO8O,EAAQ9O,OACfE,QAAQoO,GAAO,SAASQ,EAAQ5O,SAChCI,SAASgO,GAAO,UAAUQ,EAAQxO,UAClCH,SAASmO,GAAO,UAAWQ,EAAQ3O,UACnCC,OAAOkO,GAAO,QAAQQ,EAAQ1O,QAC9BC,QAAQiO,GAAO,QAAQQ,EAAQzO,SAC/B0E,OAAOuJ,GAAO,QAASQ,EAAQ/J,QAC/BC,MAAOsJ,GAAO,OAAQQ,EAAQ9J,OAC9BE,QAASoJ,GAAO,SAAUQ,EAAQ5J,SAClCD,aAAcqJ,GAAO,cAAeQ,EAAQ7J,eAE9CoG,GAAY2D,IAGdtR,QAAQC,IAAI,MAAO8B,IAEjB,yBAAKsI,UAAU,OACb,yBAAKA,UAAU,aAAa3N,MAAS4S,GACnC,2BAAOiC,QAAQ,eAAf,SACA,2BAAO7U,MAAS,CAAC0I,WAAY,OAAQvH,OAAO,OAAQ2T,SAAS,OAAQvW,GAAK,cAAc4K,KAAK,OAAO1E,KAAK,OAAOyE,SAAU,SAACpI,GAAW4Q,EAAQ5Q,EAAEC,OAAOC,SACvJ,4BAAQZ,QAAU,kBA9J1B,SAAsB2U,GACpB,IAAIC,EAAW,SAAWtD,EAAQ,QAElC,GAAIuD,OAAOC,WAAaD,OAAOC,UAAUC,iBAAkB,CACzD,IAAIC,EAAO,IAAIC,KAAK,CAACC,mBAAmBC,UAAUhL,KAAKE,UAAUsK,MAAgB,CAAE5L,KAFnE,oCAGhB+L,UAAUC,iBAAiBC,EAAMJ,OAC5B,CACL,IAAIQ,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,SAAWX,EACbQ,EAAEI,KAAO,wCAA8BC,mBAAmBtL,KAAKE,UAAUsK,IACzES,EAAEzU,OAAS,SACX0U,SAASK,KAAKC,YAAYP,GAC1BA,EAAEQ,QACFP,SAASK,KAAKG,YAAYT,IAiJEU,CAAa3L,KAAKC,MAAMD,KAAKE,UAAUsJ,OAAW/T,MAAS,CAAC0I,WAAY,OAAOvH,OAAO,OAAQ2T,SAAS,QAA/H,YACA,2BAAO9U,MAAS,CAAC0I,WAAY,OAAQvH,OAAO,OAAQ2T,SAAS,OAAQ3L,KAAK,OAAO1E,KAAK,OAAOyE,SAAU,SAACpI,GACvE,iBAArBA,EAAEC,OAAOoV,MAAM,IACxB5B,GAAO6B,WAAWtV,EAAEC,OAAOoV,MAAM,QAItC,yBAAKnW,MAAS2S,GACZ,kBAAC,EAAD,CAAatH,IAAOd,KAAKE,UAAUpF,IAAe,KAAMyL,mBAAsBtS,EAAMmD,eAAgBqP,mBAAsBxS,EAAMkD,eAC9HqP,gBAAmB1L,GAAa4L,YAAeA,KACjD,kBAAC,EAAD,CAAe3G,kBApGA,SAACsC,GACpBgH,GAAYhH,IAmG4CvC,SAAYA,GAAUD,iBAvG5D,SAACwC,GACnB+G,GAAW/G,IAsGsGnH,QAAWA,GAAS4F,IAAOd,KAAKE,UAAUpF,IAAc8E,iBAAkB9E,GAAahH,OAAQ4S,GAAa3S,SAjHzM,SAACC,EAAW8X,GAChCxC,GAAcyC,KACZ,SAACC,GACIA,EAAKhY,IAAMA,EACZgY,EAAKjY,UAAW,EAEhBiY,EAAKjY,UAAW,W,MC9S1BkY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,W","file":"static/js/main.4c3f048c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DraggableItem\":\"styles_DraggableItem__gQV0Y\"};","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"turret2\": {\r\n//     \"pos\": [8.5, 5.0],\r\n//     \"shrink\": [0.0168, 0.021375],\r\n//     \"texture\": \"turret\",\r\n//     \"entitytype\": \"past\",\r\n//     \"cooldown\": 480,\r\n//     \"direction\": [0.0, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 1.0\r\n//   }\r\n\r\nconst Turret : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, entitytype, cooldown, direction, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let directionState = direction\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n          direction:directionState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{backgroundColor: '#5143a3', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Direction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{directionState = [+e.target.value, direction[1]]; update(updatedState(), id)}} defaultValue = {direction[0]}/>\r\n            <Input onBlur={(e) =>{directionState = [direction[0], +e.target.value]; update(updatedState(), id)}} defaultValue = {direction[1]}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 20 , bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turret;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\n// gravity: -14.7,\r\n//     bounds: [32.0,18.0],\r\n//     backgroundPres: 'present_background',\r\n//     backgroundPast: 'past_background',\r\n//     diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n//     capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n//     roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n//     density: 0.0,\r\n//     heavy_density: 10.0,\r\n//     friction: 0.6,\r\n//     restitution: 0.1,\r\n//     bullet_offset: 0.7,\r\n//     effect_volume: 0.8\r\nconst World : React.FC<Props> = ({info, update,selected}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {gravity, bounds, backgroundPres, backgroundPast, diamondshape, capsuleshape, roundshape, density, heavy_density, friction, restitution, bullet_offset, effect_volume} = info\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  let gravityState = gravity\r\n  let boundsState = bounds\r\n  let backgroundPastState = backgroundPast\r\n  let backgroundPresState = backgroundPres\r\n  let diamondshapeState = diamondshape\r\n  let capsuleshapeState = capsuleshape \r\n  let roundshapeState = roundshape\r\n  let densityShape = density\r\n  let heavy_densityState = heavy_density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let bullet_offsetState = bullet_offset\r\n  let effect_volumeState = effect_volume\r\n  \r\n  let updatedState = () => {\r\n    return {\r\n        gravity:gravityState,\r\n        bounds:boundsState,\r\n        backgroundPast:backgroundPastState,\r\n        backgroundPres: backgroundPresState,\r\n        diamondshape: diamondshapeState,\r\n        capsuleshape: capsuleshapeState,\r\n        roundshape: roundshapeState,\r\n        density: densityShape,\r\n        heavy_density: heavy_densityState,\r\n        friction: frictionState,\r\n        restitution: restitutionState,\r\n        bullet_offset: bullet_offsetState,\r\n        effect_volume: effect_volumeState\r\n    }\r\n}\r\n\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ width: '100%', marginBottom: '1em' }}>World</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Gravity</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{gravityState = +e.target.value; update(updatedState())}} defaultValue={gravity} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bounds</InputGroupText>\r\n          </InputGroupAddon>\r\n          {/* TODO: change bounds input  */}\r\n          <Input onBlur={e =>{boundsState = [+e.target.value,boundsState[1]]; update(updatedState())}} defaultValue={bounds[0]} />\r\n          <Input onBlur={e =>{boundsState = [boundsState[0], +e.target.value]; update(updatedState())}} defaultValue = {bounds[1]} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Past Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPastState = e.target.value; update(updatedState())}} defaultValue={backgroundPast} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Pres Background</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Bullet Offset</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{bullet_offsetState = +e.target.value; update(updatedState())}} defaultValue={bullet_offset} />\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Effect Volume</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{effect_volumeState = +e.target.value; update(updatedState())}} defaultValue={effect_volume} />\r\n        </InputGroup>\r\n        {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Diamond Shape</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={(e) =>{backgroundPresState = e.target.value; update(updatedState())}} defaultValue={backgroundPres} />\r\n        </InputGroup> */}\r\n        \r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default World;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n}\r\n\r\n// \"door\": {\r\n//   \"pos\": [\r\n//     29.5,\r\n//     15.5\r\n//   ],\r\n//   \"size\": [\r\n//     1.6,\r\n//     1.6\r\n//   ],\r\n//   \"texture\": \"goal\",\r\n//   \"bodytype\": \"static\",\r\n//   \"density\": 0.0,\r\n//   \"friction\": 0.0,\r\n//   \"restitution\": 0.0,\r\n//   \"sensor\": true,\r\n//   \"nextlevel\": 0,\r\n//   \"space\": 3\r\nconst Door : React.FC<Props> = ({info, update,selected, world}) => {\r\n  const{ pos, size, bodytype, density, friction, restitution, texture, sensor, nextlevel, space} = info\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  console.log(sensor);\r\n  let posState = pos\r\n  let sizeState = size\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let sensorState = sensor\r\n  let nextlevelState = nextlevel\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      pos:posState,\r\n      size:sizeState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      restitution:restitutionState,\r\n      texture:textureState,\r\n      sensor:sensorState,\r\n      nextlevel:nextlevelState,\r\n      space:spaceState\r\n    }\r\n\r\n  }\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen);\r\n    selected('door', isOpen);\r\n  }\r\n  ;\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"door\" style={{ width: '100%', marginBottom: '1rem' }}>Door</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position(x,y)</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{posState[0] = +e.target.value; update(updatedState())}} default Value = {pos[0]}/>\r\n          <Input onBlur={e =>{posState[1] = +e.target.value; update(updatedState())}} default Value = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Size</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sizeState[0] = +e.target.value; update(updatedState())}} default Value = {size[0]}/>\r\n          <Input onBlur={e =>{sizeState[1] = +e.target.value; update(updatedState())}} default Value = {size[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{bodytypeState = e.target.value; update(updatedState())}} default Value = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{densityState = +e.target.value; update(updatedState())}} default Value = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{frictionState = +e.target.value; update(updatedState())}} default Value = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{restitutionState = +e.target.value; update(updatedState())}} default Value = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{textureState = e.target.value; update(updatedState())}} default Value = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Sensor</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{sensorState = (e.target.value == 'true'); update(updatedState())}} default Value = {sensor.toString()}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Next Level</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{nextlevelState = +e.target.value; update(updatedState())}} default Value = {nextlevel}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input onBlur={e =>{spaceState = e.target.value; update(updatedState())}} default Value = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 40 + 'px', bottom:convertedPos[1] - 40 + 'px'}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Door;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledCollapse,Button, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  update: (data:any) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world: any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n // \"pos\": [2.5,5.0],/\r\n  //   \"shrink\": [0.0216,0.01125],/\r\n  //   \"texture\": \"dude\",\r\n  //   \"density\": 1.0,\r\n  //   \"bodytype\": \"dynamic\", /\r\n  //   \"avatarstanding\": \"avatarstanding\",\r\n  //   \"avatarcrouching\": \"avatarcrouching\",\r\n  //   \"avatardashing\": \"avatardashing\",\r\n  //   \"avatarfalling\": \"avatarfalling\"\r\n\r\nconst Avatar : React.FC<Props> = ({info, update,selected, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, density, bodytype, avatarstanding, avatarcrouching, avatardashing, avatarfalling} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let avatarstandingState = avatarstanding\r\n  let avatarcrouchingState = avatarcrouching\r\n  let avatardashingState = avatardashing\r\n  let avatarfallingState = avatarfalling\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          avatarstanding: avatarstandingState,\r\n          avatarcrouching: avatarcrouchingState,\r\n          avatardashing: avatardashingState,\r\n          avatarfalling: avatarfallingState\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ width: '100%', marginBottom: '1rem' }}>Avatar</Button>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState())}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState())}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState())}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState())}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState())}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState())}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState())}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Standing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarstandingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Crouching</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarcrouchingState = e.target.value; update(updatedState())}} defaultValue = {avatarcrouching}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Dashing</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatardashingState = e.target.value; update(updatedState())}} defaultValue = {avatardashing}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Falling</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{avatarfallingState = e.target.value; update(updatedState())}} defaultValue = {avatarfalling}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentcapsule1\": {\r\n//     \"name\": \"present_capsule\",\r\n//     \"pos\": [\r\n//       3.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_capsule\",\r\n//     \"space\": 1\r\n//   }\r\n\r\nconst Capsule : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('capsule', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"capsule\" style={{ backgroundColor:'#36ffae', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Capsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Diamond : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#6993f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Diamond;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentround1\": {\r\n//     \"name\": \"present_round\",\r\n//     \"pos\": [11.5, 2.0],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_round\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Round : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#ad42f5', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Round;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Longcapsule : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#1cb507', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Longcapsule;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n// \"presentdiamond2\": {\r\n//     \"name\": \"present_diamond\",\r\n//     \"pos\": [\r\n//       11.0,\r\n//       7.0\r\n//     ],\r\n//     \"bodytype\": \"static\",\r\n//     \"density\": 0.0,\r\n//     \"friction\": 0.6,\r\n//     \"restitution\": 0.1,\r\n//     \"texture\": \"present_diamond\",\r\n//     \"space\": 1\r\n//   },\r\n\r\nconst Tall : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#4b00c4', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tall;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, CardBody, Card, ButtonGroup } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\n\r\nconst Pillar : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {name, pos, friction, restitution, texture, space, bodytype, density} = info\r\n\r\n  let nameState = name\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n  let updatedState = () => {\r\n    return {\r\n      name:nameState,\r\n      pos:posState,\r\n      bodytype:bodytypeState,\r\n      density:densityState,\r\n      friction:frictionState,\r\n      resitution:restitutionState,\r\n      texture:textureState,\r\n      space:spaceState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#ed5abc', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n      <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameState = e.target.value; update(updatedState(), id)}} defaultValue = {name}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = +e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'90px', width: '90px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0], bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pillar;\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\nconst Enemy : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, shrink, texture, aitype, entitytype, cooldown, bodytype, density} = info\r\n\r\n  let posState= pos\r\n  let shrinkState = shrink\r\n  let textureState = texture\r\n  let densityState = density\r\n  let bodytypeState = bodytype\r\n  let entitytypeState = entitytype\r\n  let cooldownState = cooldown\r\n  let aitypeState = aitype\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n\r\n  let updatedState = () => {\r\n      return {\r\n          pos: posState,\r\n          shrink: shrinkState,\r\n          texture: textureState,\r\n          aitype: aitypeState,\r\n          density: densityState,\r\n          bodytype: bodytypeState,\r\n          entitytype:entitytypeState,\r\n          cooldown:cooldownState,\r\n      }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('world', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"world\" style={{ backgroundColor: '#f79400', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>Delete</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {info.pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Shrink</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{shrinkState =[+e.target.value,shrinkState[1]]; update(updatedState(), id)}} defaultValue = {shrink[0]}/>\r\n            <Input onBlur={(e) =>{shrinkState =[shrinkState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {shrink[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {entitytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>AI Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{aitypeState = +e.target.value; update(updatedState(), id)}} defaultValue = {aitype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Cooldown</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{cooldownState = +e.target.value; update(updatedState(), id)}} defaultValue = {cooldown}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Enemy;\r\n","import { UncontrolledCollapse, Col, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { UncontrolledDropdown, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  gameObjects: any\r\n  updateTurret: (data: any, id: string) => void\r\n  updateEnemy: (data: any, id: string) => void\r\n  updatePlatform: (data: any, id: string, type: string) => void\r\n  updateNumPlat: (n: number) => void\r\n  updateSpike: (data: any, id: string) => void\r\n  numPlat: number\r\n  // selected: (compName:string, open:boolean) => void\r\n}\r\n\r\nconst AddButton: React.FC<Props> = ({ gameObjects, updateTurret, updateEnemy, updatePlatform, numPlat, updateNumPlat, updateSpike }) => {\r\n  let { avatar, world, door, turrets, diamonds, rounds, enemies, capsules } = gameObjects\r\n  const [isCheckedTurret, setIsCheckedTurret] = useState(true);\r\n  const [isCheckedEnemy, setIsCheckedEnemy] = useState(false);\r\n  const [isCheckedPlatform, setIsCheckedPlatform] = useState(false);\r\n  const [isCheckedSpike, setIsCheckedSpike] = useState(false);\r\n  const [isCheckedCapsule, setIsCheckedCapsule] = useState(false);\r\n  const [isCheckedDiamond, setIsCheckedDiamond] = useState(false);\r\n  const [isCheckedRound, setIsCheckedRound] = useState(false);\r\n  // const [numPlatforms, setNumPlatforms] =useState(numPlat)\r\n  const [init, setInit] = useState(true);\r\n\r\n  let openTurret = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(true);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openEnemy = () => {\r\n    setIsCheckedEnemy(true);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openPlatform = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(true);\r\n    setIsCheckedSpike(false);\r\n  }\r\n  let openSpike = () => {\r\n    setIsCheckedEnemy(false);\r\n    setIsCheckedTurret(false);\r\n    setIsCheckedPlatform(false);\r\n    setIsCheckedSpike(true);\r\n  }\r\n  // let openCapsule = () => {\r\n  //   openPlatform()\r\n\r\n  // }\r\n\r\n  //turret states \r\n  let posStateTurret = [17, 9]\r\n  let shrinkStateTurret = [0.0168, 0.021375]\r\n  let textureStateTurret = 'present_turret'\r\n  let densityStateTurret = 1.0\r\n  let bodytypeStateTurret = 'static'\r\n  let entitytypeStateTurret = 'present'\r\n  let cooldownStateTurret = 360\r\n  let directionStateTurret = [-3, 0]\r\n\r\n  //enemy states\r\n  let posStateEnemy = [17, 9]\r\n  let shrinkStateEnemy = [0.0168, 0.021375]\r\n  let textureStateEnemy = 'enemypresent'\r\n  let densityStateEnemy = 1.0\r\n  let bodytypeStateEnemy = 'dynamic'\r\n  let entitytypeStateEnemy = 'present'\r\n  let cooldownStateEnemy = 360\r\n  let aitypeStateEnemy = 1\r\n\r\n  //platform states \r\n  let platformType = 'capsule'\r\n  let nameStatePlatform = 'present_capsule'\r\n  let posStatePlatform = [17, 9]\r\n  let bodytypeStatePlatform = 'static'\r\n  let densityStatePlatform = 0.0\r\n  let frictionStatePlatform = .6\r\n  let restitutionStatePlatform = .1\r\n  let textureStatePlatform = 'present_capsule'\r\n  let spaceStatePlatform = 1\r\n\r\n  //spike states\r\n  let posStateSpike = [6.1, 5.5]\r\n  let bodytypeStateSpike = \"static\"\r\n  let densityStateSpike = 0.0\r\n  let frictionStateSpike = 0.6\r\n  let restitutionStateSpike = 0.1 \r\n  let textureStateSpike = \"spikes\"\r\n  let spaceStateSpike = 1\r\n  let angleStateSpike = 0\r\n\r\n  let newTurret = () => {\r\n    let newKey = 'turret'\r\n    let newTurret = {\r\n      pos: posStateTurret,\r\n      shrink: shrinkStateTurret,\r\n      texture: textureStateTurret,\r\n      density: densityStateTurret,\r\n      bodytype: bodytypeStateTurret,\r\n      entitytype: entitytypeStateTurret,\r\n      cooldown: cooldownStateTurret,\r\n      direction: directionStateTurret\r\n    }\r\n    updateTurret(newTurret, newKey)\r\n  }\r\n  let newEnemy = () => {\r\n    let newKey = 'enemy'\r\n    let newEnemy = {\r\n      pos: posStateEnemy,\r\n      shrink: shrinkStateEnemy,\r\n      texture: 'enemy' + entitytypeStateEnemy,\r\n      density: densityStateEnemy,\r\n      bodytype: bodytypeStateEnemy,\r\n      entitytype: entitytypeStateEnemy,\r\n      cooldown: cooldownStateEnemy,\r\n      aitype: aitypeStateEnemy\r\n    }\r\n    updateEnemy(newEnemy, newKey)\r\n  }\r\n  let newSpike = () => {\r\n    let newKey = 'spike'\r\n    let newSpike = {\r\n      pos: posStateSpike,\r\n      bodytype: bodytypeStateSpike,\r\n      density: densityStateSpike,\r\n      friction: frictionStateSpike,\r\n      restitution: restitutionStateSpike,\r\n      texture: textureStateSpike,\r\n      space: spaceStateSpike,\r\n      angle: angleStateSpike,\r\n    }\r\n    updateSpike(newSpike, newKey)\r\n  }\r\n  let newPlatform = (type: string) => {\r\n    let time = 'bugHappened'\r\n    let newKey = 'bugHappened'\r\n    if (spaceStatePlatform === 1) {\r\n      time = 'present'\r\n    } else if (spaceStatePlatform === 2) {\r\n      time = 'past'\r\n    } else if (spaceStatePlatform === 3) {\r\n      time = 'both'\r\n    } else {\r\n      time = 'bugNotPastPres'\r\n    }\r\n\r\n    newKey = time + type\r\n    let newPlatform = {\r\n      name: time + \"_\" + platformType,\r\n      pos: posStatePlatform,\r\n      bodytype: bodytypeStatePlatform,\r\n      density: densityStatePlatform,\r\n      friction: frictionStatePlatform,\r\n      restitution: restitutionStatePlatform,\r\n      texture: time + \"_\" + platformType,\r\n      space: spaceStatePlatform\r\n    }\r\n    updateNumPlat(numPlat + 1)\r\n    updatePlatform(newPlatform, newKey, platformType)\r\n  }\r\n\r\n  let itemTypeStyle = {\r\n    marginLeft: '5px'\r\n  };\r\n  return (\r\n    <div >\r\n      <Button color=\"secondary\" id=\"toggler\" style={{ width: '100%', backgroundColor: '#fa511e', marginBottom: '2em' }}>Add</Button>\r\n      <UncontrolledCollapse style={{ marginBottom: '2em' }} toggler=\"#toggler\">\r\n        <Form inline>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openTurret() }} type=\"radio\" name=\"itemType\" id=\"itemTypeTurret\" style={{ marginLeft: '8px' }} defaultChecked /> Turret {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openEnemy() }} type=\"radio\" name=\"itemType\" id=\"itemTypeEnemy\" /> Enemy {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openPlatform() }} type=\"radio\" name=\"itemType\" id=\"itemTypePlatform\" /> Platform {' '}\r\n            </Label>\r\n          </FormGroup>\r\n          <FormGroup >\r\n            <Label check inline style={itemTypeStyle}>\r\n              <Input onChange={() => { openSpike() }} type=\"radio\" name=\"itemType\" id=\"itemTypePlatform\" /> Spike {' '}\r\n            </Label>\r\n          </FormGroup>\r\n        </Form>\r\n        {/* turret inputs */}\r\n        <Collapse isOpened={isCheckedTurret}>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateTurret = [+e.target.value, posStateTurret[1]]; }} defaultValue={posStateTurret[0]} />\r\n            <Input onBlur={(e) => { posStateTurret = [posStateTurret[0], +e.target.value]; }} defaultValue={posStateTurret[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Shrink</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { shrinkStateTurret = [+e.target.value, shrinkStateTurret[1]]; }} defaultValue={shrinkStateTurret[0]} />\r\n            <Input onBlur={(e) => { shrinkStateTurret = [shrinkStateTurret[0], +e.target.value]; }} defaultValue={shrinkStateTurret[1]} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Texture</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { textureStateTurret = e.target.value; }} defaultValue={textureStateTurret} />\r\n          </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateTurret = +e.target.value; }} defaultValue={densityStateTurret} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateTurret = e.target.value; }} defaultValue={bodytypeStateTurret} />\r\n          </InputGroup>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateTurret = 'present'; textureStateTurret = entitytypeStateTurret + \"_turret\" }} type=\"radio\" name=\"entitytypeTurret\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateTurret = 'past'; textureStateTurret = entitytypeStateTurret + \"_turret\" }} type=\"radio\" name=\"entitytypeTurret\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Cooldown</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { cooldownStateTurret = +e.target.value; }} defaultValue={cooldownStateTurret} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Direction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { directionStateTurret = [+e.target.value, directionStateTurret[1]]; }} defaultValue={directionStateTurret[0]} />\r\n            <Input onBlur={(e) => { directionStateTurret = [directionStateTurret[0], +e.target.value]; }} defaultValue={directionStateTurret[1]} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newTurret() }}>Submit</Button>\r\n        </Collapse>\r\n        {/* end turret inputs */}\r\n        {/* begin enemy inputs */}\r\n        <Collapse isOpened={isCheckedEnemy}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateEnemy = 'present'; }} type=\"radio\" name=\"entitytypeEnemy\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { entitytypeStateEnemy = 'past'; }} type=\"radio\" name=\"entitytypeEnemy\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateEnemy = [+e.target.value, posStateEnemy[1]]; }} defaultValue={posStateEnemy[0]} />\r\n            <Input onBlur={(e) => { posStateEnemy = [posStateEnemy[0], +e.target.value]; }} defaultValue={posStateEnemy[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Shrink</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { shrinkStateEnemy = [+e.target.value, shrinkStateEnemy[1]]; }} defaultValue={shrinkStateEnemy[0]} />\r\n            <Input onBlur={(e) => { shrinkStateEnemy = [shrinkStateEnemy[0], +e.target.value]; }} defaultValue={shrinkStateEnemy[1]} />\r\n          </InputGroup>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 1; }} type=\"radio\" name=\"aitypeEnemy\"style={{ marginLeft: '8px' }} defaultChecked /> Walk {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 2; }} type=\"radio\" name=\"aitypeEnemy\"/> Teleport{' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 3; }} type=\"radio\" name=\"aitypeEnemy\"/> Gun{' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { aitypeStateEnemy = 4; }} type=\"radio\" name=\"aitypeEnemy\"/> Fly{' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStateEnemy = e.target.value;   }} defaultValue = {textureStateEnemy}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateEnemy = +e.target.value; }} defaultValue={densityStateEnemy} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateEnemy = e.target.value; }} defaultValue={bodytypeStateEnemy} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Entity Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{entitytypeStateEnemy = e.target.value;   }} defaultValue = {entitytypeStateEnemy}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Cooldown</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { cooldownStateEnemy = +e.target.value; }} defaultValue={cooldownStateEnemy} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newEnemy() }}>Submit</Button>\r\n        </Collapse>\r\n        {/* end enemy inputs */}\r\n        {/* begin platform inputs */}\r\n        <Collapse isOpened={isCheckedPlatform}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'capsule'; }} type=\"radio\" name=\"platformType\" id=\"capsule\" style={{ marginLeft: '8px' }} defaultChecked /> Capsule {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'diamond'; }} type=\"radio\" name=\"platformType\" id=\"diamond\" /> Diamond {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'round'; }} type=\"radio\" name=\"platformType\" id=\"round\" /> Round {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'tall'; }} type=\"radio\" name=\"platformType\" id=\"round\" /> Tall {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'longcapsule'; }} type=\"radio\" name=\"platformType\" id=\"round\" /> Longcapsule {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { platformType = 'pillar'; }} type=\"radio\" name=\"platformType\" id=\"round\" /> Pillar {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 1; }} type=\"radio\" name=\"space\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 2; }} type=\"radio\" name=\"space\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStatePlatform = 3; }} type=\"radio\" name=\"space\" id=\"Both\" /> Both {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Name</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{nameStatePlatform = e.target.value;   }} defaultValue = {nameStatePlatform}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStatePlatform = [+e.target.value, posStatePlatform[1]]; }} defaultValue={posStatePlatform[0]} />\r\n            <Input onBlur={(e) => { posStatePlatform = [posStatePlatform[0], +e.target.value]; }} defaultValue={posStatePlatform[1]} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureStatePlatform = e.target.value;   }} defaultValue = {textureStatePlatform}/>\r\n        </InputGroup> */}\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStatePlatform = +e.target.value; }} defaultValue={densityStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStatePlatform = e.target.value; }} defaultValue={bodytypeStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Friction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { frictionStatePlatform = +e.target.value; }} defaultValue={frictionStatePlatform} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Restitution</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { restitutionStatePlatform = +e.target.value; }} defaultValue={restitutionStatePlatform} />\r\n          </InputGroup>\r\n          {/* <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceStatePlatform = +e.target.value;   }} defaultValue = {spaceStatePlatform}/>\r\n        </InputGroup> */}\r\n          <Button onClick={() => { newPlatform(platformType) }}>Submit</Button>\r\n        </Collapse>\r\n        <Collapse isOpened={isCheckedSpike}>\r\n          <Form inline>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStateSpike = 1; }} type=\"radio\" name=\"space\" id=\"present\" style={{ marginLeft: '8px' }} defaultChecked /> Present {' '}\r\n              </Label>\r\n            </FormGroup>\r\n            <FormGroup >\r\n              <Label check inline style={itemTypeStyle}>\r\n                <Input onChange={(e) => { spaceStateSpike = 2; }} type=\"radio\" name=\"space\" id=\"past\" /> Past {' '}\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Position</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { posStateSpike = [+e.target.value, posStateSpike[1]]; }} defaultValue={posStateSpike[0]} />\r\n            <Input onBlur={(e) => { posStateSpike = [posStateSpike[0], +e.target.value]; }} defaultValue={posStateSpike[1]} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Density</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { densityStateSpike = +e.target.value; }} defaultValue={densityStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Body Type</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { bodytypeStateSpike = e.target.value; }} defaultValue={bodytypeStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Friction</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { frictionStateSpike = +e.target.value; }} defaultValue={frictionStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Restitution</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { restitutionStateSpike = +e.target.value; }} defaultValue={restitutionStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Texture</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { textureStateSpike = e.target.value; }} defaultValue={textureStateSpike} />\r\n          </InputGroup>\r\n          <InputGroup>\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>Angle</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input onBlur={(e) => { angleStateSpike = +e.target.value; }} defaultValue={angleStateSpike} />\r\n          </InputGroup>\r\n          <Button onClick={() => { newSpike() }}>Submit</Button>\r\n        </Collapse>\r\n      </UncontrolledCollapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddButton;\r\n\r\n","import React, { createRef, Fragment, useState } from 'react'\r\nimport { Collapse } from 'react-collapse';\r\nimport { Button, ButtonGroup, CardBody, Card } from 'reactstrap';\r\nimport { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n// ES6\r\n\r\n\r\ninterface Props {\r\n  info:any\r\n  id: string\r\n  update: (data:any, i:string) => void\r\n  selected: (compName:string, open:boolean) => void\r\n  world:any\r\n  // isMenuOpenFn: (b:boolean) => boolean\r\n  // isMenuOpen?: boolean\r\n}\r\nconst Spike : React.FC<Props> = ({info, update, selected, id, world}) => {\r\n\r\n  //update is a prop for updating in App the state, passes through ItemDashboard first\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const {pos, bodytype, density, friction, restitution, texture, space, angle} = info\r\n\r\n  let posState= pos\r\n  let bodytypeState = bodytype\r\n  let densityState = density\r\n  let frictionState = friction\r\n  let restitutionState = restitution\r\n  let textureState = texture\r\n  let spaceState = space\r\n  let angleState = angle\r\n\r\n\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n  let convertedPos = gameCoordToPx(pos)\r\n\r\n  let updatedState = () => {\r\n    return {\r\n      pos: posState,\r\n      bodytype: bodytypeState,\r\n      density: densityState,\r\n      friction: frictionState,\r\n      restitution: restitutionState,\r\n      texture: textureState,\r\n      space: spaceState,\r\n      angle: angleState\r\n    }\r\n  }\r\n  const toggle = () => { //for toggling hiding the menu\r\n    setIsOpen(!isOpen);\r\n    selected('spike', isOpen);\r\n  };\r\n  return (\r\n    <div >\r\n      <ButtonGroup style = {{width: '100%'}}>\r\n        <Button color=\"primary\" onClick = {toggle} id=\"spike\" style={{ backgroundColor: '#1aa7e8', marginBottom: '1rem' }}>{id}</Button>\r\n        <Button color=\"danger\" onClick = {() => update('delete', id)} id=\"delete\" style={{ marginBottom: '1rem' }}>X</Button>\r\n      </ButtonGroup>\r\n      <Collapse isOpened={isOpen}>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Position</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{posState =[+e.target.value,posState[1]]; update(updatedState(), id)}} defaultValue = {pos[0]}/>\r\n            <Input onBlur={(e) =>{posState =[posState[0],+e.target.value]; update(updatedState(), id)}} defaultValue = {pos[1]}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Texture</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{textureState = e.target.value; update(updatedState(), id)}} defaultValue = {texture}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Density</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{densityState = +e.target.value; update(updatedState(), id)}} defaultValue = {density}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Friction</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{frictionState = +e.target.value; update(updatedState(), id)}} defaultValue = {friction}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Restitution</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{restitutionState = +e.target.value; update(updatedState(), id)}} defaultValue = {restitution}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Body Type</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{bodytypeState = e.target.value; update(updatedState(), id)}} defaultValue = {bodytype}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Space</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{spaceState = e.target.value; update(updatedState(), id)}} defaultValue = {space}/>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Angle</InputGroupText>\r\n          </InputGroupAddon>\r\n            <Input onBlur={(e) =>{angleState = +e.target.value; update(updatedState(), id)}} defaultValue = {angle}/>\r\n        </InputGroup>\r\n        <div style = {{display: isOpen ? 'block': 'none',height:'60px', width: '60px', backgroundColor:'yellow', opacity: '50%', position:'absolute', left:convertedPos[0] - 30, bottom:convertedPos[1]}}></div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spike;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\n// import GameObject  from './GameObject';\r\nimport Turret from './Turret';\r\nimport World from './World';\r\nimport Door from './Door';\r\nimport Avatar from './Avatar';\r\nimport Capsule from './Capsule';\r\nimport Diamond from './Diamond';\r\nimport Round from './Round';\r\nimport Longcapsule from './Longcapsule';\r\nimport Tall from './Tall';\r\nimport Pillar from './Pillar';\r\nimport Enemy from './Enemy';\r\nimport AddButton from './AddButton';\r\nimport Spike from './Spike';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { uuid } from 'uuidv4';\r\n\r\ninterface Props {\r\n    gameObjectsInput: any;\r\n    update: (data:any) => void\r\n    selected: (id:string, open:boolean) => void\r\n    numPlat: number\r\n    numEnemy: number\r\n    updateNumPlatApp: (n:number) => void\r\n    updateNumEnemyApp: (n:number) => void\r\n}\r\n\r\n// interface GameObjectType{\r\n//   name: string,\r\n//   jsonitem: Object\r\n// }\r\nconst objectTypes = ['world', 'turret']\r\nconst windowStyling : CSS.Properties= {\r\n    height: '100%',\r\n    width: '100%',\r\n    background: '#aaaaaa',\r\n    display: 'inline-block',\r\n    float: 'right',\r\n    overflow: 'scroll'\r\n}\r\n// function createTurret(p:Array<number>){\r\n//   return <Turret pos = {p} updatefn = {updateTurret}></Turret>;\r\n// }\r\n\r\nconst ItemDashboard : React.FC<Props> = ({gameObjectsInput, update, selected, numPlat, updateNumPlatApp, numEnemy, updateNumEnemyApp}) => {\r\n  const [gameObjects, setGameObjects] = useState<any>(JSON.parse(JSON.stringify(gameObjectsInput)));\r\n  console.log(\"init game objects\", gameObjects)\r\n  let {world, avatar, door, turrets, diamonds, rounds, enemies, capsules, spikes, talls, longcapsules, pillars} = gameObjects\r\n  console.log(\"init spikes\", spikes)\r\n  //updates in App the state assuming world was changed\r\n  let updateWorldState = (newWorld:any) => {\r\n    \r\n    let newGameObjects = {\r\n      world:newWorld,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects);\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming door was changed\r\n  let updateDoorState = (newDoor:any) => {\r\n    let {world, avatar, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:newDoor,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //updates Apps state assuming avatar was changed\r\n  let updateAvatarState = (newAva:any) => {\r\n    let {world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:newAva,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTurretState = (newTurr:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newTurrets = turrets;\r\n    let add = true;\r\n    if( newTurr == 'delete'){\r\n      delete newTurrets[id]\r\n    }else {\r\n      for (let [key, value] of Object.entries(turrets)) {\r\n        if(key == id){\r\n          newTurrets[key] = newTurr;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newTurrets[id] = newTurr}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:newTurrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n\r\n  let updateCapsuleState = (newCap:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newCapsules = capsules;\r\n    let add = true;\r\n    if(newCap == 'delete'){\r\n      delete newCapsules[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(capsules)) {\r\n        if(key == id){\r\n          newCapsules[key] = newCap;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newCapsules[id] = newCap}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:newCapsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateDiamondState = (newDia:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newDiamonds = diamonds;\r\n    let add = true;\r\n    if(newDia == 'delete'){\r\n      delete newDiamonds[id]\r\n    } else {\r\n      for (let [key, value] of Object.entries(diamonds)) {\r\n        if(key == id){\r\n          newDiamonds[key] = newDia;\r\n          add = false;\r\n          console.log(\"newDiaID\", id)\r\n          break;\r\n        }\r\n      }\r\n      if(add){\r\n        newDiamonds[id] = newDia\r\n      }\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:newDiamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    console.log(\"debugging new diamond platform\", newGameObjects)\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateRoundState = (newRound:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newRounds = rounds;\r\n    let add = true;\r\n    if (newRound == 'delete'){\r\n      delete newRounds[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(rounds)) {\r\n        if(key == id){\r\n          newRounds[key] = newRound;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newRounds[id] = newRound}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:newRounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateTallState = (newTall:any, id:string) => {\r\n    let newTalls = talls;\r\n    let add = true;\r\n    if (newTall == 'delete'){\r\n      delete newTalls[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(talls)) {\r\n        if(key === id){\r\n          newTalls[key] = newTall;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newTalls[id] = newTall}\r\n    }\r\n    console.log(newTalls);\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:newTalls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateLongcapsuleState = (newLongcapsule:any, id:string) => {\r\n    let newLongcapsules = longcapsules;\r\n    let add = true;\r\n    if (newLongcapsule ==='delete'){\r\n      delete newLongcapsules[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(talls)) {\r\n        if(key === id){\r\n          newLongcapsules[key] = newLongcapsule;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newLongcapsules[id] = newLongcapsule}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:newLongcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updatePillarState = (newPillar:any, id:string) => {\r\n    let newPillars = pillars;\r\n    let add = true;\r\n    if (newPillar == 'delete'){\r\n      delete newPillars[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(talls)) {\r\n        if(key === id){\r\n          newPillars[key] = newPillar;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){newPillars[id] = newPillar}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:newPillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let updateEnemyState = (newEnemy:any, id:string) => {\r\n    let {avatar,world, door, turrets, diamonds, rounds, enemies, capsules, spikes} = gameObjects\r\n    let newEnemies = enemies;\r\n    let add = true;\r\n    if (newEnemy == 'delete'){\r\n      delete newEnemies[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(enemies)) {\r\n        if(key == id){\r\n          newEnemies[key] = newEnemy;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + (numEnemy + 1); updateNumEnemy(numEnemy + 1); newEnemies[id] = newEnemy}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:newEnemies,\r\n      spikes: spikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  let addPlatform = (newPlatform:any, id:string, type:string) => {\r\n    if( type === 'round'){\r\n      updateRoundState(newPlatform, id +(numPlat + 1))\r\n    } else if (type === 'diamond'){\r\n      updateDiamondState(newPlatform, id  + (numPlat + 1))\r\n    } else if (type === 'capsule') {\r\n      updateCapsuleState(newPlatform, id  + (numPlat + 1))\r\n    } else if (type === 'longcapsule') {\r\n      updateLongcapsuleState(newPlatform, id  + (numPlat + 1))\r\n    } else if (type === 'tall'){\r\n      updateTallState(newPlatform, id  + (numPlat + 1))\r\n    } else if (type === 'pillar'){\r\n      updatePillarState(newPlatform, id  + (numPlat + 1))\r\n    }\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    updateNumPlatApp(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    updateNumEnemyApp(n);\r\n  }\r\n  let updateSpikeState = (newSpike:any, id:string) => {\r\n    console.log(\"currspikes\", gameObjects);\r\n    let newSpikes = spikes;\r\n    let add = true;\r\n    if (newSpike == 'delete'){\r\n      delete newSpikes[id]\r\n    }else{\r\n      for (let [key, value] of Object.entries(spikes)) {\r\n        if(key == id){\r\n          newSpikes[key] = newSpike;\r\n          add = false;\r\n          break;\r\n        }\r\n      }\r\n      if(add){id = id + Object.keys(spikes).length; newSpikes[id] = newSpike}\r\n    }\r\n    let newGameObjects = {\r\n      world:world,\r\n      avatar:avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:newSpikes,\r\n      talls:talls,\r\n      longcapsules:longcapsules,\r\n      pillars:pillars\r\n    }\r\n    update(newGameObjects)\r\n    setGameObjects(newGameObjects)\r\n  }\r\n  //list of components initially, will always have a door, world, and avatar, avatar not implemented yet\r\n  const [componentList, setComponentList] = useState<any>([\r\n    <AddButton updateSpike = {updateSpikeState} updateNumPlat = {updateNumPlat} numPlat = {numPlat} key = {'add'} gameObjects ={gameObjects} updateEnemy = {updateEnemyState} updateTurret = {updateTurretState} updatePlatform ={addPlatform}></AddButton>,\r\n    <Divider variant=\"middle\" />,\r\n    <World key = {JSON.stringify(gameObjects) + \" world\"} info = {gameObjects.world} update = {updateWorldState} selected = {selected}></World>,\r\n    <Divider variant=\"middle\" />,\r\n    <Door world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" door\"} info = {gameObjects.door} update = {updateDoorState} selected = {selected}></Door>,\r\n    <Avatar world = {gameObjects.world} key = {JSON.stringify(gameObjects) + \" avatar\"} info = {gameObjects.avatar} update = {updateAvatarState} selected = {selected}></Avatar>,\r\n    ]\r\n    )\r\n  let components = componentList;\r\n  for (let [key, value] of Object.entries(gameObjects.turrets)) {\r\n    components.push(<Turret world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateTurretState} selected = {selected}></Turret>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.capsules)) {\r\n    components.push(<Capsule world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateCapsuleState} selected = {selected}></Capsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.diamonds)) {\r\n    components.push(<Diamond world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateDiamondState} selected = {selected}></Diamond>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.rounds)) {\r\n    components.push(<Round world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateRoundState} selected = {selected}></Round>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.longcapsules)) {\r\n    components.push(<Longcapsule world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateLongcapsuleState} selected = {selected}></Longcapsule>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.talls)) {\r\n    components.push(<Tall world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updateTallState} selected = {selected}></Tall>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.pillars)) {\r\n    components.push(<Pillar world = {gameObjects.world} key = {key + Math.random()} info = {value} id = {key} update = {updatePillarState} selected = {selected}></Pillar>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.enemies)) {\r\n    components.push(<Enemy world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateEnemyState} selected = {selected}></Enemy>);\r\n  }\r\n  for (let [key, value] of Object.entries(gameObjects.spikes)) {\r\n    components.push(<Spike world = {gameObjects.world} key = {key} info = {value} id = {key} update = {updateSpikeState} selected = {selected}></Spike>);\r\n  }\r\n  // <Turret key = {JSON.stringify(gameObjects) + 'turret'} info = {gameObjects.turrets.turret1} id = 'turret1' update = {updateTurretState} selected = {selected}></Turret>\r\n  return (\r\n    <div className=\"ItemDashboard\" style = {windowStyling}>\r\n        {components}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDashboard;\r\n","// overflow: scroll;\r\nimport React, { Fragment, useState, ContextType } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport { DraggableCore } from 'react-draggable'; // <DraggableCore>\r\nimport styles from './styles.module.css';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ninterface Props {\r\n  texturePres?: string\r\n  texturePast?: string\r\n  idInput: string\r\n  posInput: Array<number>\r\n  updatePosInput: (a: Array<number>, idUpdate: string) => void\r\n  centered: boolean\r\n  scaleY: number\r\n  scaleX: number\r\n  lineX1?: number\r\n  lineY1?: number\r\n  lineX2?: number\r\n  lineY2?: number\r\n  angle?: number\r\n}\r\n\r\n\r\nconst LevelWindowItem: React.FC<Props> = ({ texturePres, texturePast, idInput, posInput, updatePosInput, centered, scaleY, scaleX, lineX1, lineY1, lineX2, lineY2, angle }) => {\r\n  const [id, setId] = useState<string>(idInput);\r\n  const [height, setHeight] = useState(90)\r\n  const [width, setWidth] = useState(90)\r\n  const [hoverOpacity, setHoverOpacity] = useState(1)\r\n  let trackX = 0;\r\n  let trackY = 0;\r\n  let temp: any;\r\n  let x1 = (typeof lineX1 !== undefined) ? lineX1 : 0\r\n  let x2 = (typeof lineX2 !== undefined) ? lineX2 : 10\r\n  //@ts-ignore\r\n  let y1 = ((typeof lineY1 !== undefined) ? lineY1 : 0)\r\n  //@ts-ignore\r\n  let y2 = ((typeof lineY2 !== undefined) ? lineY2 : 10)\r\n  let transAngle = (typeof angle !== undefined) ? angle : 0\r\n  let transXRegex = /\\.*translate\\((.*?)px/i;\r\n  let transYRegex = /\\.*translate\\(.*px,(.*?)px\\)/i;\r\n  let coords = { x1, x2, y1, y2 }\r\n  let imgStyle = {\r\n    width: width * scaleX,\r\n    height: height * scaleY + 'px',\r\n    transform: 'rotate(' + transAngle + 'deg)',\r\n    opacity: hoverOpacity\r\n  }\r\n\r\n  return (\r\n    // updatePosInput takes a list of the new position values (calculated by adding drag pos to current pos) and name of the component\r\n    // .008 * 600/18\r\n    <div className={styles.DraggableItem}>\r\n      <Draggable onStop={(e, data) => updatePosInput([(posInput[0] + data.x), posInput[1] - data.y], idInput)}>\r\n        <div style = {{\r\n            width: width * scaleX,\r\n            height: height * scaleY + 'px',\r\n            position: 'absolute',\r\n            left: centered ? posInput[0] - width * scaleX / 2 : posInput[0],\r\n            bottom: centered ? posInput[1] - height * scaleY / 2 : posInput[1],\r\n          }}>\r\n        <Tooltip title = {id} aria-label= {id}>\r\n          <img\r\n            onMouseEnter ={() => setHoverOpacity(.5)}\r\n            onMouseLeave ={() => setHoverOpacity(1)}\r\n            ref={el => temp = el}\r\n            src={\"./assets/\" + texturePres + \".png\"}\r\n            style = {imgStyle}\r\n            onLoad={(e) => { setWidth(temp.naturalWidth); setHeight(temp.naturalHeight);}}\r\n            alt={texturePres}\r\n          >\r\n          </img>\r\n        </Tooltip>\r\n        </div>\r\n      </Draggable>\r\n      <div style={{\r\n        zIndex: -1,\r\n        width: width * scaleX + 'px',\r\n        height: height * scaleY + 'px',\r\n        position: 'absolute',\r\n        left: (centered ? posInput[0] - width * scaleX / 3 : posInput[0] + width * scaleX / 3) + 'px',\r\n        bottom: posInput[1] - 20 + 'px'\r\n      }}>\r\n        <svg>\r\n          <line {...coords} stroke=\"black\" strokeWidth='2'></line>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindowItem;","// overflow: scroll;\r\nimport React, { Fragment, useState } from 'react'\r\nimport { string } from 'prop-types';\r\nimport CSS from 'csstype';\r\nimport Draggable from 'react-draggable'; // The default\r\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\r\nimport { url } from 'inspector';\r\nimport LevelWindowItem from './LevelWindowItem';\r\nimport Door from './Door';\r\n\r\n// import avatar from \"/assets/avatar.png\"\r\ninterface Props {\r\n    backgroundPastPath: string\r\n    backgroundPresPath: string\r\n    gameObjectState: any\r\n    updateState: (s:any) => any\r\n}\r\n\r\n// 'url(\"/assets/past_room2.png\")'\r\nconst windowStyling : CSS.Properties= {\r\n    height: '600px',\r\n    minHeight:'600px',\r\n    minWidth: '1000px',\r\n    width: '1200px',\r\n    float: 'left',\r\n    color: '#000000',\r\n    position: 'relative'\r\n}\r\n\r\nconst LevelWindow : React.FC<Props> = ({backgroundPastPath, backgroundPresPath, gameObjectState,updateState}) => {\r\n  const[gameObjects, setGameObjects] = useState(gameObjectState)\r\n  let world = gameObjectState.world\r\n  let avatar = gameObjectState.avatar\r\n  let door = gameObjectState.door\r\n  let turrets = gameObjectState.turrets\r\n  let capsules = gameObjects.capsules\r\n  let diamonds = gameObjects.diamonds\r\n  let rounds = gameObjects.rounds\r\n  let enemies = gameObjects.enemies\r\n  let spikes = gameObjects.spikes\r\n  let talls = gameObjects.talls\r\n  let pillars = gameObjects.pillars\r\n  let longcapsules = gameObjects.longcapsules\r\n  //takes an array representing a position in game coordinates and converts to array of pixel coordinates\r\n  let gameCoordToPx = (gc:Array<number>) => {\r\n    return [gc[0] * 1000 / world.bounds[0], gc[1] * 600 / world.bounds[1]]\r\n  }\r\n\r\n  //takes an array representing a position in pixels and converts to array of game coordinates\r\n  let pxToGameCoord = (px:Array<number>) => {\r\n    return [px[0] * world.bounds[0] / 1000, px[1] * world.bounds[1] / 600]\r\n  }\r\n  let updatePos = (p:Array<number>, id:string) =>{\r\n    p = pxToGameCoord(p)\r\n    if(id == 'door'){\r\n      // let { size, bodyType,density,friction,restitution,texturePres,texturePast } = gameObjectState.door\r\n      door.pos = p\r\n    } else if (id == 'avatar'){\r\n      avatar.pos = p\r\n    } else if (id.includes('turret')){\r\n      for (let [key, value] of Object.entries(turrets)){\r\n        if(key == id){\r\n          turrets[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('diamond')){\r\n      for (let [key, value] of Object.entries(diamonds)){\r\n        if(key == id){\r\n          diamonds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('round')){\r\n      for (let [key, value] of Object.entries(rounds)){\r\n        if(key == id){\r\n          rounds[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('longcapsule')){\r\n      for (let [key, value] of Object.entries(longcapsules)){\r\n        if(key == id){\r\n          console.log('long');\r\n          longcapsules[key].pos = p;\r\n        }\r\n      }\r\n    }else if (id.includes('capsule')){\r\n      for (let [key, value] of Object.entries(capsules)){\r\n        if(key == id){\r\n          capsules[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('enemy')){\r\n      for (let [key, value] of Object.entries(enemies)){\r\n        if(key == id){\r\n          enemies[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('spike')){\r\n      for (let [key, value] of Object.entries(spikes)){\r\n        if(key == id){\r\n          spikes[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('tall')){\r\n      for (let [key, value] of Object.entries(talls)){\r\n        if(key == id){\r\n          talls[key].pos = p;\r\n        }\r\n      }\r\n    } else if (id.includes('pillar')){\r\n      for (let [key, value] of Object.entries(pillars)){\r\n        if(key == id){\r\n          pillars[key].pos = p;\r\n        }\r\n      }\r\n    }\r\n    let newGS = {\r\n      world:world,\r\n      avatar: avatar,\r\n      door:door,\r\n      turrets:turrets,\r\n      capsules:capsules,\r\n      diamonds:diamonds,\r\n      rounds:rounds,\r\n      enemies:enemies,\r\n      spikes:spikes,\r\n      pillars:pillars,\r\n      talls:talls,\r\n      longcapsules:longcapsules\r\n    }\r\n    setGameObjects(newGS)\r\n    updateState(newGS)\r\n  }\r\n  let coords = {\r\n    x1: 0,\r\n    y1: 0,\r\n    x2: 10,\r\n    y2: 10\r\n  }\r\n  // rescale formular platform height =  .008 * 600/world.bounds[1]\r\n  let windowItems = [\r\n    <LevelWindowItem scaleX = {.03 * 1000/ world.bounds[0]} scaleY = {.03 * 600 / world.bounds[1]} centered = {true} key = {\"door\"} texturePres = {gameObjectState.door.texture} idInput = \"door\" posInput = {gameCoordToPx(gameObjectState.door.pos)} updatePosInput = {updatePos}></LevelWindowItem>,\r\n    <LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600 / world.bounds[1]} centered = {true} key = {\"avatar\"} texturePres = {gameObjectState.avatar.texture} idInput = \"avatar\" posInput = {gameCoordToPx(gameObjectState.avatar.pos)} updatePosInput = {updatePos}></LevelWindowItem>\r\n  ]\r\n  for (let [key, value] of Object.entries(turrets)) {\r\n    windowItems.push(<LevelWindowItem lineX1 = {turrets[key].pos[0] + turrets[key].direction[0]*20}  lineX2 = {turrets[key].pos[0]} lineY2 = {turrets[key].pos[1]} lineY1 = {turrets[key].pos[1] + turrets[key].direction[1] * 20} scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {turrets[key].texture} idInput = {key} posInput = {gameCoordToPx(turrets[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n    // windowItems.push(<div style = {{zIndex:-1, position:'absolute' as 'absolute', left:gameCoordToPx(turrets[key].pos)[0], bottom:gameCoordToPx(turrets[key].pos)[1]}}><svg height = '60px' width = '160px'>\r\n    //   <line x1 = {turrets[key].pos[0]} y1= {turrets[key].pos[1]} x2 = {turrets[key].pos[0] + turrets[key].direction[0] * 20} y2 = {turrets[key].pos[1] + turrets[key].direction[1]} stroke = \"black\" strokeWidth = '2'></line>\r\n    // </svg></div>);\r\n  }\r\n  for (let [key, value] of Object.entries(capsules)) {\r\n    windowItems.push(< LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {capsules[key].texture} idInput = {key} posInput = {gameCoordToPx(capsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(diamonds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {diamonds[key].texture} idInput = {key} posInput = {gameCoordToPx(diamonds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(rounds)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {rounds[key].texture} idInput = {key} posInput = {gameCoordToPx(rounds[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(enemies)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.024 * 1000/ world.bounds[0]} scaleY = {.0225 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {enemies[key].texture} idInput = {key} posInput = {gameCoordToPx(enemies[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(spikes)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.01 * 1000/ world.bounds[0]} scaleY = {.01 * 600/world.bounds[1]} centered = {true} key = {key} texturePres = {spikes[key].texture} idInput = {key} posInput = {gameCoordToPx(spikes[key].pos)} updatePosInput = {updatePos} angle = {spikes[key].angle}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(talls)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {talls[key].texture} idInput = {key} posInput = {gameCoordToPx(talls[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(pillars)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {pillars[key].texture} idInput = {key} posInput = {gameCoordToPx(pillars[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  for (let [key, value] of Object.entries(longcapsules)) {\r\n    windowItems.push(<LevelWindowItem scaleX = {.008 * 1000/ world.bounds[0]} scaleY = {.0075 * 600/world.bounds[1]} centered = {false} key = {key} texturePres = {longcapsules[key].texture} idInput = {key} posInput = {gameCoordToPx(longcapsules[key].pos)} updatePosInput = {updatePos}></LevelWindowItem>);\r\n  }\r\n  return (\r\n    <div className=\"LevelWindow\" style = {windowStyling}>\r\n      <img style = {{position:'absolute', top:'0px', left:'0px', height:'600px',width:'1000px', zIndex:-10}}src = {\"./assets/\"+ backgroundPastPath+\".png\"}></img>\r\n      {windowItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LevelWindow;\r\n","import React, { Fragment, useState } from 'react'\r\nimport './App.css';\r\nimport World from './components/World';\r\nimport ItemDashboard from './components/ItemDashboard';\r\nimport LevelWindow from './components/LevelWindow';\r\nimport Turret from './components/Turret';\r\nimport Door from './components/Door';\r\nimport Avatar from './components/Avatar';\r\n// import uuid from 'uuid';\r\n\r\n//initial json and level\r\nlet level = 0;\r\nlet levelInit = {\r\n  world: {\r\n    gravity: -14.7,\r\n    bounds: [32.0,18.0],\r\n    backgroundPres: 'present_background1',\r\n    backgroundPast: 'past_background1',\r\n    diamondshape: [0.4, 1.8, 0.5, 1.8, 2.1, 1.8, 2.2, 1.8, 1.4, 0.1],\r\n    capsuleshape: [0.4, 1.1, 0.5, 1.1, 2.6, 1.1, 2.7, 1.1, 2.6, 0.6, 2.0, 0.2, 1.1, 0.2, 0.5, 0.6],\r\n    roundshape: [0.4, 1.4, 0.8, 1.7, 2.1, 1.7, 2.4, 1.4, 2.3, 0.8, 1.7, 0.3, 1.1, 0.3],\r\n    spikeshape: [0.3, -0.6, 0.0, -0.2, -0.6, 0.0, -0.5, 0.4, 0.0, 0.6, 0.4, -0.2, 0.6, -0.3],\r\n    density: 0.0,\r\n    heavy_density: 10.0,\r\n    friction: 0.6,\r\n    restitution: 0.1,\r\n    bullet_offset: 0.7,\r\n    effect_volume: 0.8\r\n  },\r\n  capsules: {\r\n    presentcapsule1: {\r\n      name: \"present_capsule\",\r\n      pos: [\r\n        3.0,\r\n        7.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_capsule\",\r\n      space: 1\r\n    },\r\n    pastcapsule1: {\r\n      name: \"past_capsule\",\r\n      pos: [\r\n        4.5,\r\n        1.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_capsule\",\r\n      space: 2\r\n    }\r\n  },\r\n  diamonds: {\r\n    presentdiamond1: {\r\n      name: \"present_diamond\",\r\n      pos: [\r\n        1.0,\r\n        2.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_diamond\",\r\n      space: 1\r\n    },\r\n    pastdiamond1: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        13.5,\r\n        3.5\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    },\r\n    pastdiamond2: {\r\n      name: \"past_diamond\",\r\n      pos: [\r\n        20.0,\r\n        5.0\r\n      ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_diamond\",\r\n      space: 2\r\n    }\r\n  },\r\n  rounds: {\r\n    presentround1: {\r\n      name: \"present_round\",\r\n      pos: [11.5, 2.0],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    presentround2: {\r\n      name: \"present_round\",\r\n      pos: [ 9.5, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"present_round\",\r\n      space: 1\r\n    },\r\n    pastround1: {\r\n      name: \"past_round\",\r\n      pos: [ 2.0, 13.0 ],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"past_round\",\r\n      space: 2\r\n    },\r\n  },\r\n  enemies: {\r\n    enemy1: {\r\n      pos: [13.0, 6.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypresent\",\r\n      entitytype: \"present\",\r\n      aitype: 1,\r\n      cooldown: 360,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    },\r\n    enemy2: {\r\n      pos: [15.625, 11.03125],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"enemypast\",\r\n      aitype: 1,\r\n      entitytype: \"past\",\r\n      cooldown: 360,\r\n      bodytype: \"dynamic\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  avatar: {\r\n    pos: [2.5, 5.0],\r\n    shrink: [0.0216,0.01125],\r\n    texture: 'dude',\r\n    density: 1.0,\r\n    bodytype: 'dynamic',\r\n    avatarstanding: 'avatarstanding',\r\n    avatarcrouching: 'avatarcrouching',\r\n    avatardashing: 'avatardashing',\r\n    avatarfalling: 'avatarfalling'\r\n  },\r\n  door: {\r\n    pos: [29.5, 15.5],\r\n    size: [1.92, 1.92],\r\n    bodytype: 'static',\r\n    density: 0.0,\r\n    friction: 0.0,\r\n    restitution: 0.0,\r\n    texture: 'goal',\r\n    sensor: true,\r\n    nextlevel: 0,\r\n    space: 3\r\n  },\r\n  turrets: {\r\n    turret1: {\r\n      pos: [18.5,10.3],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"present_turret\",\r\n      entitytype: \"present\",\r\n      cooldown: 360,\r\n      direction: [-3.0, 0.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    },\r\n    turret2: {\r\n      pos: [8.5, 5.0],\r\n      shrink: [0.0168, 0.021375],\r\n      texture: \"past_turret\",\r\n      entitytype: \"past\",\r\n      cooldown: 480,\r\n      direction: [0.0, 2.0],\r\n      bodytype: \"static\",\r\n      density: 1.0\r\n    }\r\n  },\r\n  spikes:{\r\n    spike0:{\r\n      pos: [3,4],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"spikes\",\r\n      space: 1,\r\n      angle: 30\r\n    },\r\n    spike1:{\r\n      pos: [5,6],\r\n      bodytype: \"static\",\r\n      density: 0.0,\r\n      friction: 0.6,\r\n      restitution: 0.1,\r\n      texture: \"spikes\",\r\n      space: 1,\r\n      angle: 30\r\n    }\r\n\r\n  },\r\n  longcapsules:{\r\n    \r\n  },\r\n  talls:{\r\n\r\n  },\r\n  pillars:{\r\n\r\n  }\r\n};\r\n\r\n//styling for container holding Level Window and ItemDashboard\r\nconst containerStyling = {\r\n  height: '600px',\r\n  minWidth: '1000px',\r\n  // width: '100vw',\r\n  display: 'flex'\r\n}\r\n\r\n//styling for this\r\nconst headerStyling = {\r\n  minHeight: '30px',\r\n  height: '30px',\r\n  width: '100%',\r\n  display: 'inline-block',\r\n  padding:0\r\n}\r\n\r\n//downloads state info as a json called export\r\nfunction exportToJson(objectData: JSON) {\r\n  let filename = \"level_\" + level + \".json\";\r\n  let contentType = \"application/json;charset=utf-8;\";\r\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n    var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\r\n    navigator.msSaveOrOpenBlob(blob, filename);\r\n  } else {\r\n    var a = document.createElement('a');\r\n    a.download = filename;\r\n    a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\r\n    a.target = '_blank';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n  }\r\n}\r\n\r\n\r\nconst App : React.FC = ({}) => {\r\n  \r\n  const [world, setWorld] = useState(levelInit.world);\r\n  const [avatar, setAvatar] = useState(levelInit.avatar);\r\n  const [door, setDoor] = useState(levelInit.door);\r\n  const [turrets, setTurrets] = useState(levelInit.turrets);\r\n  const [capsules, setCapsules] = useState(levelInit.capsules);\r\n  const [diamonds, setDiamonds] = useState(levelInit.diamonds);\r\n  const [rounds, setRounds] = useState(levelInit.rounds);\r\n  const [enemies, setEnemies] = useState(levelInit.enemies);\r\n  const [spikes, setSpikes] = useState(levelInit.spikes);\r\n  const [pillars, setPillars] = useState(levelInit.pillars);\r\n  const [talls, setTalls] = useState(levelInit.talls);\r\n  const [longcapsules, setLongcapsules] = useState(levelInit.longcapsules);\r\n  const [gameObjects, setGameObjects] = useState<any>(levelInit); //represents json, init with levelinit\r\n  const [numPlat, setNumPlat] = useState(9);\r\n  const [numEnemy, setNumEnemy] = useState(5);\r\n  const [objectPostitions, setOp] = useState(new Object()) // not used yet\r\n\r\n\r\n  let editorObjects = useState([{id:'world', selected: false}]); //not used yet\r\n  let updateState = (newState:any) => { // updates state\r\n    let {world, capsules, diamonds, rounds, enemies, avatar, door, turrets, spikes, pillars, talls, longcapsules} = newState;\r\n    setWorld(world)\r\n    setAvatar(avatar)\r\n    setDoor(door)\r\n    setTurrets(turrets)\r\n    setEnemies(enemies)\r\n    setCapsules(capsules)\r\n    setDiamonds(diamonds)\r\n    setRounds(rounds)\r\n    setSpikes(spikes)\r\n    setPillars(pillars)\r\n    setLongcapsules(longcapsules)\r\n    setTalls(talls)\r\n    setGameObjects(newState)\r\n  }\r\n  let selectComponent = (id:string, open:boolean) => { //not used for anything yet\r\n    editorObjects.map(\r\n      (item:any) => {\r\n        if(item.id == id){\r\n          item.selected = true;\r\n        }else{\r\n          item.selected = false;\r\n        }\r\n    })\r\n  }\r\n  let updateNumPlat = (n:number) => {\r\n    setNumPlat(n);\r\n  }\r\n  let updateNumEnemy = (n:number) => {\r\n    setNumEnemy(n);\r\n  }\r\n  //used for debugging and formatting json during download\r\n  \r\n  // gravity: -14.7,\r\n  // bounds: [32.0,18.0],\r\n  // \"present_background\": \"present_background\",\r\n  // \"past_background\": \"past_background\",\r\n  // diamondshape: [ 0.2, 1.8, 2.4, 1.8, 1.4, 0.1],\r\n  // capsuleshape: [0.2,1.1,2.9,1.1,2.9,0.6,1.7,0.1,0.2,0.6],\r\n  // roundshape: [ 0.1, 1.4, 0.5, 1.7, 2.4, 1.7, 2.7, 1.4, 2.6, 0.8, 2.0, 0.2, 0.8, 0.2 ],\r\n  // density: 0.0,\r\n  // heavy_density: 10.0,\r\n  // friction: 0.6,\r\n  // restitution: 0.1,\r\n  // bullet_offset: 0.7,\r\n  // effect_volume: 0.8\r\n  let tester = {\r\n    gravity: world.gravity,\r\n    bounds: world.bounds,\r\n    present_background: world.backgroundPres,\r\n    past_background: world.backgroundPast,\r\n    diamondshape: world.diamondshape,\r\n    capsuleshape: world.capsuleshape,\r\n    roundshape: world.roundshape,\r\n    spikeshape: world.spikeshape,\r\n    density: world.density,\r\n    heavy_density: world.heavy_density,\r\n    friction: world.friction,\r\n    restitution: world.restitution,\r\n    bullet_offset: world.bullet_offset,\r\n    effect_volume: world.effect_volume,\r\n    door,\r\n    avatar,\r\n    turrets,\r\n    capsules,\r\n    diamonds,\r\n    rounds,\r\n    enemies,\r\n    spikes,\r\n    talls,\r\n    pillars,\r\n    longcapsules\r\n  }\r\n  let rename = (base:string, objects:any) =>{\r\n    let index = 1\r\n    let newObject:any = {}\r\n    for(let [key, value] of Object.entries(objects)){\r\n      newObject[base + index + \"\"] = value\r\n      index++\r\n    }\r\n    return newObject\r\n  }\r\n  let reader = new FileReader()\r\n  reader.onload = function(e:any) {\r\n    let newJSON:any = JSON.parse(JSON.parse(JSON.stringify(e.target.result,null,2)))\r\n    console.log('newjson',newJSON)\r\n    let {gravity, bounds, present_background, past_background, diamondshape, capsuleshape, roundshape}:any = newJSON\r\n    let reformat = {\r\n      world:{\r\n        gravity: gravity,\r\n        bounds:bounds,\r\n        backgroundPres:present_background,\r\n        backgroundPast:past_background,\r\n        diamondshape:diamondshape,\r\n        capsuleshape:capsuleshape,\r\n        roundshape:roundshape\r\n      },\r\n      door:newJSON.door,\r\n      avatar:newJSON.avatar,\r\n      turrets:rename('turret',newJSON.turrets),\r\n      capsules:rename('capsule',newJSON.capsules),\r\n      diamonds:rename('diamond', newJSON.diamonds),\r\n      rounds:rename('round',newJSON.rounds),\r\n      enemies:rename('enemy',newJSON.enemies),\r\n      spikes:rename('spike', newJSON.spikes),\r\n      talls: rename('tall', newJSON.talls),\r\n      pillars: rename('pillar', newJSON.pillars),\r\n      longcapsules: rename('longcapsule', newJSON.longcapsules)\r\n    }\r\n    updateState(reformat);\r\n    \r\n  }\r\n  console.log(\"App\", gameObjects)\r\n  return (\r\n    <div className=\"App\" >\r\n      <div className=\"App-header\" style = {headerStyling} >\r\n        <label htmlFor=\"level_input\">Level</label>\r\n        <input style = {{marginLeft: '20px', height:'20px', fontSize:'7pt'}} id = \"level_input\" type=\"text\" name=\"text\" onChange={(e:any) => {level = e.target.value}}/>\r\n        <button onClick= {() => exportToJson(JSON.parse(JSON.stringify(tester)))} style = {{marginLeft: '20px',height:'20px', fontSize:'7pt'}}>Download</button>\r\n        <input style = {{marginLeft: '20px', height:'20px', fontSize:'7pt'}} type=\"file\" name=\"file\" onChange={(e:any) => {\r\n          if(typeof e.target.files[0] == 'object'){\r\n           reader.readAsText(e.target.files[0])\r\n          }\r\n          }}/>\r\n      </div>\r\n      <div style = {containerStyling}>\r\n        <LevelWindow key = {JSON.stringify(gameObjects) + \"lw\"} backgroundPastPath = {world.backgroundPast} backgroundPresPath = {world.backgroundPres} \r\n          gameObjectState = {gameObjects} updateState = {updateState}></LevelWindow>\r\n        <ItemDashboard updateNumEnemyApp = {updateNumEnemy} numEnemy = {numEnemy} updateNumPlatApp = {updateNumPlat} numPlat = {numPlat} key = {JSON.stringify(gameObjects)} gameObjectsInput={gameObjects} update={updateState} selected={selectComponent}>\r\n          </ItemDashboard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import '!style-loader!css-loader!bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}